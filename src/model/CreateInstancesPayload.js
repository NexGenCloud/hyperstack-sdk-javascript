/**
 * Infrahub-API
 * Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateSecurityRulePayload from './CreateSecurityRulePayload';
import FlavorObjectFields from './FlavorObjectFields';
import ProfileObjectFields from './ProfileObjectFields';

/**
 * The CreateInstancesPayload model module.
 * @module model/CreateInstancesPayload
 * @version v1.25.0-alpha
 */
class CreateInstancesPayload {
    /**
     * Constructs a new <code>CreateInstancesPayload</code>.
     * @alias module:model/CreateInstancesPayload
     * @param count {Number} The number of virtual machines to be created.
     * @param environmentName {String} The name of the [environment](https://infrahub-doc.nexgencloud.com/docs/features/environments-available-features) in which the virtual machine is to be created.
     * @param flavorName {String} The name of the GPU hardware configuration ([flavor](https://infrahub-doc.nexgencloud.com/docs/hardware/flavors)) for the virtual machines being created.
     * @param keyName {String} The name of the existing SSH key pair to be used for secure access to the virtual machine. For additional information on SSH key pairs, [**click here**](https://infrahub-doc.nexgencloud.com/docs/getting-started/create-keypair).
     * @param name {String} The name of the virtual machine being created.
     */
    constructor(count, environmentName, flavorName, keyName, name) { 
        
        CreateInstancesPayload.initialize(this, count, environmentName, flavorName, keyName, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, count, environmentName, flavorName, keyName, name) { 
        obj['count'] = count;
        obj['enable_port_randomization'] = true;
        obj['environment_name'] = environmentName;
        obj['flavor_name'] = flavorName;
        obj['key_name'] = keyName;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>CreateInstancesPayload</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateInstancesPayload} obj Optional instance to populate.
     * @return {module:model/CreateInstancesPayload} The populated <code>CreateInstancesPayload</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateInstancesPayload();

            if (data.hasOwnProperty('assign_floating_ip')) {
                obj['assign_floating_ip'] = ApiClient.convertToType(data['assign_floating_ip'], 'Boolean');
            }
            if (data.hasOwnProperty('callback_url')) {
                obj['callback_url'] = ApiClient.convertToType(data['callback_url'], 'String');
            }
            if (data.hasOwnProperty('count')) {
                obj['count'] = ApiClient.convertToType(data['count'], 'Number');
            }
            if (data.hasOwnProperty('create_bootable_volume')) {
                obj['create_bootable_volume'] = ApiClient.convertToType(data['create_bootable_volume'], 'Boolean');
            }
            if (data.hasOwnProperty('enable_port_randomization')) {
                obj['enable_port_randomization'] = ApiClient.convertToType(data['enable_port_randomization'], 'Boolean');
            }
            if (data.hasOwnProperty('environment_name')) {
                obj['environment_name'] = ApiClient.convertToType(data['environment_name'], 'String');
            }
            if (data.hasOwnProperty('flavor')) {
                obj['flavor'] = FlavorObjectFields.constructFromObject(data['flavor']);
            }
            if (data.hasOwnProperty('flavor_name')) {
                obj['flavor_name'] = ApiClient.convertToType(data['flavor_name'], 'String');
            }
            if (data.hasOwnProperty('image_name')) {
                obj['image_name'] = ApiClient.convertToType(data['image_name'], 'String');
            }
            if (data.hasOwnProperty('key_name')) {
                obj['key_name'] = ApiClient.convertToType(data['key_name'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], ['String']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('profile')) {
                obj['profile'] = ProfileObjectFields.constructFromObject(data['profile']);
            }
            if (data.hasOwnProperty('security_rules')) {
                obj['security_rules'] = ApiClient.convertToType(data['security_rules'], [CreateSecurityRulePayload]);
            }
            if (data.hasOwnProperty('user_data')) {
                obj['user_data'] = ApiClient.convertToType(data['user_data'], 'String');
            }
            if (data.hasOwnProperty('volume_name')) {
                obj['volume_name'] = ApiClient.convertToType(data['volume_name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateInstancesPayload</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateInstancesPayload</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateInstancesPayload.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['callback_url'] && !(typeof data['callback_url'] === 'string' || data['callback_url'] instanceof String)) {
            throw new Error("Expected the field `callback_url` to be a primitive type in the JSON string but got " + data['callback_url']);
        }
        // ensure the json data is a string
        if (data['environment_name'] && !(typeof data['environment_name'] === 'string' || data['environment_name'] instanceof String)) {
            throw new Error("Expected the field `environment_name` to be a primitive type in the JSON string but got " + data['environment_name']);
        }
        // validate the optional field `flavor`
        if (data['flavor']) { // data not null
          FlavorObjectFields.validateJSON(data['flavor']);
        }
        // ensure the json data is a string
        if (data['flavor_name'] && !(typeof data['flavor_name'] === 'string' || data['flavor_name'] instanceof String)) {
            throw new Error("Expected the field `flavor_name` to be a primitive type in the JSON string but got " + data['flavor_name']);
        }
        // ensure the json data is a string
        if (data['image_name'] && !(typeof data['image_name'] === 'string' || data['image_name'] instanceof String)) {
            throw new Error("Expected the field `image_name` to be a primitive type in the JSON string but got " + data['image_name']);
        }
        // ensure the json data is a string
        if (data['key_name'] && !(typeof data['key_name'] === 'string' || data['key_name'] instanceof String)) {
            throw new Error("Expected the field `key_name` to be a primitive type in the JSON string but got " + data['key_name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['labels'])) {
            throw new Error("Expected the field `labels` to be an array in the JSON data but got " + data['labels']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `profile`
        if (data['profile']) { // data not null
          ProfileObjectFields.validateJSON(data['profile']);
        }
        if (data['security_rules']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['security_rules'])) {
                throw new Error("Expected the field `security_rules` to be an array in the JSON data but got " + data['security_rules']);
            }
            // validate the optional field `security_rules` (array)
            for (const item of data['security_rules']) {
                CreateSecurityRulePayload.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['user_data'] && !(typeof data['user_data'] === 'string' || data['user_data'] instanceof String)) {
            throw new Error("Expected the field `user_data` to be a primitive type in the JSON string but got " + data['user_data']);
        }
        // ensure the json data is a string
        if (data['volume_name'] && !(typeof data['volume_name'] === 'string' || data['volume_name'] instanceof String)) {
            throw new Error("Expected the field `volume_name` to be a primitive type in the JSON string but got " + data['volume_name']);
        }

        return true;
    }


}

CreateInstancesPayload.RequiredProperties = ["count", "environment_name", "flavor_name", "key_name", "name"];

/**
 * When this field is set to `true`, it attaches a [public IP address](https://infrahub-doc.nexgencloud.com/docs/virtual-machines/public-ip)to the virtual machine, enabling internet accessibility.
 * @member {Boolean} assign_floating_ip
 */
CreateInstancesPayload.prototype['assign_floating_ip'] = undefined;

/**
 * An optional URL where actions performed on the virtual machine will be sent. For additional information on event callbacks, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/webhooks-callbacks).
 * @member {String} callback_url
 */
CreateInstancesPayload.prototype['callback_url'] = undefined;

/**
 * The number of virtual machines to be created.
 * @member {Number} count
 */
CreateInstancesPayload.prototype['count'] = undefined;

/**
 * Indicates whether to create a bootable volume for the virtual machine. When set to `true`, a bootable volume will be created; the default value is `false`.
 * @member {Boolean} create_bootable_volume
 */
CreateInstancesPayload.prototype['create_bootable_volume'] = undefined;

/**
 * Indicates whether to enable port randomization.This setting is only effective if 'assign_floating_ip' is true. Defaults to true.
 * @member {Boolean} enable_port_randomization
 * @default true
 */
CreateInstancesPayload.prototype['enable_port_randomization'] = true;

/**
 * The name of the [environment](https://infrahub-doc.nexgencloud.com/docs/features/environments-available-features) in which the virtual machine is to be created.
 * @member {String} environment_name
 */
CreateInstancesPayload.prototype['environment_name'] = undefined;

/**
 * @member {module:model/FlavorObjectFields} flavor
 */
CreateInstancesPayload.prototype['flavor'] = undefined;

/**
 * The name of the GPU hardware configuration ([flavor](https://infrahub-doc.nexgencloud.com/docs/hardware/flavors)) for the virtual machines being created.
 * @member {String} flavor_name
 */
CreateInstancesPayload.prototype['flavor_name'] = undefined;

/**
 * The [operating system (OS) image](https://infrahub-doc.nexgencloud.com/docs/virtual-machines/images) name designated for installation on the virtual machine.It also accepts custom, private images, created from [existing snapshots](https://infrahub-doc.nexgencloud.com/docs/virtual-machines/custom-images).
 * @member {String} image_name
 */
CreateInstancesPayload.prototype['image_name'] = undefined;

/**
 * The name of the existing SSH key pair to be used for secure access to the virtual machine. For additional information on SSH key pairs, [**click here**](https://infrahub-doc.nexgencloud.com/docs/getting-started/create-keypair).
 * @member {String} key_name
 */
CreateInstancesPayload.prototype['key_name'] = undefined;

/**
 * @member {Array.<String>} labels
 */
CreateInstancesPayload.prototype['labels'] = undefined;

/**
 * The name of the virtual machine being created.
 * @member {String} name
 */
CreateInstancesPayload.prototype['name'] = undefined;

/**
 * @member {module:model/ProfileObjectFields} profile
 */
CreateInstancesPayload.prototype['profile'] = undefined;

/**
 * @member {Array.<module:model/CreateSecurityRulePayload>} security_rules
 */
CreateInstancesPayload.prototype['security_rules'] = undefined;

/**
 * Optional initialization configuration commands to manage the configuration of a virtual machine at launch using cloud-init scripts. For more information about custom VM configuration using cloud-init, [**click here**](https://infrahub-doc.nexgencloud.com/docs/virtual-machines/initialization-configuration).
 * @member {String} user_data
 */
CreateInstancesPayload.prototype['user_data'] = undefined;

/**
 * The names of the volume(s) to be attached to the virtual machine being created.
 * @member {String} volume_name
 */
CreateInstancesPayload.prototype['volume_name'] = undefined;






export default CreateInstancesPayload;

