/**
 * Infrahub-API
 * Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateVolumePayload from '../model/CreateVolumePayload';
import ErrorResponseModel from '../model/ErrorResponseModel';
import NameAvailableModel from '../model/NameAvailableModel';
import ResponseModel from '../model/ResponseModel';
import UpdateVolumePayload from '../model/UpdateVolumePayload';
import UpdateVolumeResponse from '../model/UpdateVolumeResponse';
import Volume from '../model/Volume';
import VolumeTypes from '../model/VolumeTypes';
import Volumes from '../model/Volumes';

/**
* Volume service.
* @module api/VolumeApi
* @version v1.41.0-alpha
*/
export default class VolumeApi {

    /**
    * Constructs a new VolumeApi. 
    * @alias module:api/VolumeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create volume
     * Creates a volume that can be attached to a virtual machine, expanding its storage capacity. Specify the volume type and custom configuration in the request body. For additional details on volumes, [**click here**]({Config.INFRAHUB_DOCS_BASE}/docs/api-reference/core-resources/volumes/create-volume).
     * @param {module:model/CreateVolumePayload} payload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Volume} and HTTP response
     */
    createVolumeWithHttpInfo(payload) {
      let postBody = payload;
      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling createVolume");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Volume;
      return this.apiClient.callApi(
        '/core/volumes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create volume
     * Creates a volume that can be attached to a virtual machine, expanding its storage capacity. Specify the volume type and custom configuration in the request body. For additional details on volumes, [**click here**]({Config.INFRAHUB_DOCS_BASE}/docs/api-reference/core-resources/volumes/create-volume).
     * @param {module:model/CreateVolumePayload} payload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Volume}
     */
    createVolume(payload) {
      return this.createVolumeWithHttpInfo(payload)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete volume
     * Deletes a volume permanently. Provide the volume ID in the path to specify the volume to be deleted.
     * @param {Number} volumeId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResponseModel} and HTTP response
     */
    deleteVolumeWithHttpInfo(volumeId) {
      let postBody = null;
      // verify the required parameter 'volumeId' is set
      if (volumeId === undefined || volumeId === null) {
        throw new Error("Missing the required parameter 'volumeId' when calling deleteVolume");
      }

      let pathParams = {
        'volume_id': volumeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponseModel;
      return this.apiClient.callApi(
        '/core/volumes/{volume_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete volume
     * Deletes a volume permanently. Provide the volume ID in the path to specify the volume to be deleted.
     * @param {Number} volumeId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResponseModel}
     */
    deleteVolume(volumeId) {
      return this.deleteVolumeWithHttpInfo(volumeId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Fetch Volume Details
     * Fetch volume details for specific volume. This endpoint returns id, name, volume size, volume type, status, description, image_id, os_image, created_at, updated_at etc.
     * @param {Number} volumeId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Volume} and HTTP response
     */
    fetchVolumeDetailsWithHttpInfo(volumeId) {
      let postBody = null;
      // verify the required parameter 'volumeId' is set
      if (volumeId === undefined || volumeId === null) {
        throw new Error("Missing the required parameter 'volumeId' when calling fetchVolumeDetails");
      }

      let pathParams = {
        'volume_id': volumeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Volume;
      return this.apiClient.callApi(
        '/core/volumes/{volume_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Fetch Volume Details
     * Fetch volume details for specific volume. This endpoint returns id, name, volume size, volume type, status, description, image_id, os_image, created_at, updated_at etc.
     * @param {Number} volumeId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Volume}
     */
    fetchVolumeDetails(volumeId) {
      return this.fetchVolumeDetailsWithHttpInfo(volumeId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Fetch volume name availability
     * Check if a Volume name is available
     * @param {String} name 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NameAvailableModel} and HTTP response
     */
    fetchVolumeNameAvailabilityWithHttpInfo(name) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling fetchVolumeNameAvailability");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NameAvailableModel;
      return this.apiClient.callApi(
        '/core/volume/name-availability/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Fetch volume name availability
     * Check if a Volume name is available
     * @param {String} name 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NameAvailableModel}
     */
    fetchVolumeNameAvailability(name) {
      return this.fetchVolumeNameAvailabilityWithHttpInfo(name)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List volume types
     * Retrieves a list of available volume types that can be used in the creation of a new volume.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VolumeTypes} and HTTP response
     */
    listVolumeTypesWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VolumeTypes;
      return this.apiClient.callApi(
        '/core/volume-types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List volume types
     * Retrieves a list of available volume types that can be used in the creation of a new volume.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VolumeTypes}
     */
    listVolumeTypes() {
      return this.listVolumeTypesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List volumes
     * Returns a list of your existing volumes, providing details for each. For more information on volumes, [**click here**]({Config.INFRAHUB_DOCS_BASE}/docs/api-reference/core-resources/volumes/).
     * @param {Object} opts Optional parameters
     * @param {String} [page] Page Number
     * @param {String} [pageSize] Data Per Page
     * @param {String} [search] 
     * @param {String} [environment] Filter Environment ID or Name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Volumes} and HTTP response
     */
    listVolumesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'search': opts['search'],
        'environment': opts['environment']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Volumes;
      return this.apiClient.callApi(
        '/core/volumes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List volumes
     * Returns a list of your existing volumes, providing details for each. For more information on volumes, [**click here**]({Config.INFRAHUB_DOCS_BASE}/docs/api-reference/core-resources/volumes/).
     * @param {Object} opts Optional parameters
     * @param {String} opts.page Page Number
     * @param {String} opts.pageSize Data Per Page
     * @param {String} opts.search 
     * @param {String} opts.environment Filter Environment ID or Name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Volumes}
     */
    listVolumes(opts) {
      return this.listVolumesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update volume fields
     * Update volume properties. Currently supports updating the environment by providing 'environment_name'. The volume must not be attached to any instance when changing environments, and the target environment must be in the same region.
     * @param {Number} volumeId 
     * @param {module:model/UpdateVolumePayload} payload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateVolumeResponse} and HTTP response
     */
    updateVolumeWithHttpInfo(volumeId, payload) {
      let postBody = payload;
      // verify the required parameter 'volumeId' is set
      if (volumeId === undefined || volumeId === null) {
        throw new Error("Missing the required parameter 'volumeId' when calling updateVolume");
      }
      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateVolume");
      }

      let pathParams = {
        'volume_id': volumeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateVolumeResponse;
      return this.apiClient.callApi(
        '/core/volumes/{volume_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update volume fields
     * Update volume properties. Currently supports updating the environment by providing 'environment_name'. The volume must not be attached to any instance when changing environments, and the target environment must be in the same region.
     * @param {Number} volumeId 
     * @param {module:model/UpdateVolumePayload} payload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateVolumeResponse}
     */
    updateVolume(volumeId, payload) {
      return this.updateVolumeWithHttpInfo(volumeId, payload)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
