/**
 * Infrahub-API
 * Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BetaAccessRequestPayload from '../model/BetaAccessRequestPayload';
import BetaAccessRequestResponseModel from '../model/BetaAccessRequestResponseModel';
import BetaAccessStatusResponseModel from '../model/BetaAccessStatusResponseModel';
import ErrorResponseModel from '../model/ErrorResponseModel';

/**
* BetaAccess service.
* @module api/BetaAccessApi
* @version v1.42.0-alpha
*/
export default class BetaAccessApi {

    /**
    * Constructs a new BetaAccessApi. 
    * @alias module:api/BetaAccessApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a new beta access request
     * Creates a new beta access request for the current user
     * @param {module:model/BetaAccessRequestPayload} payload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BetaAccessRequestResponseModel} and HTTP response
     */
    createABetaAccessRequestWithHttpInfo(payload) {
      let postBody = payload;
      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling createABetaAccessRequest");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BetaAccessRequestResponseModel;
      return this.apiClient.callApi(
        '/auth/beta-access/requests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a new beta access request
     * Creates a new beta access request for the current user
     * @param {module:model/BetaAccessRequestPayload} payload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BetaAccessRequestResponseModel}
     */
    createABetaAccessRequest(payload) {
      return this.createABetaAccessRequestWithHttpInfo(payload)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Check the status of all beta access requests
     * Check the status of all beta access requests.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BetaAccessStatusResponseModel} and HTTP response
     */
    getBetaAccessStatusWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BetaAccessStatusResponseModel;
      return this.apiClient.callApi(
        '/auth/beta-access/requests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Check the status of all beta access requests
     * Check the status of all beta access requests.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BetaAccessStatusResponseModel}
     */
    getBetaAccessStatus() {
      return this.getBetaAccessStatusWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Check the status of beta access requests
     * Check the status of a particular beta access requests.
     * @param {String} program 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BetaAccessStatusResponseModel} and HTTP response
     */
    getBetaAccessStatus2WithHttpInfo(program) {
      let postBody = null;
      // verify the required parameter 'program' is set
      if (program === undefined || program === null) {
        throw new Error("Missing the required parameter 'program' when calling getBetaAccessStatus2");
      }

      let pathParams = {
        'program': program
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BetaAccessStatusResponseModel;
      return this.apiClient.callApi(
        '/auth/beta-access/requests/{program}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Check the status of beta access requests
     * Check the status of a particular beta access requests.
     * @param {String} program 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BetaAccessStatusResponseModel}
     */
    getBetaAccessStatus2(program) {
      return this.getBetaAccessStatus2WithHttpInfo(program)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
