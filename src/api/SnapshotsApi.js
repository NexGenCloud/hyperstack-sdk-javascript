/**
 * Infrahub-API
 * Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateImage from '../model/CreateImage';
import CreateImagePayload from '../model/CreateImagePayload';
import ErrorResponseModel from '../model/ErrorResponseModel';
import Instance from '../model/Instance';
import NameAvailableModel from '../model/NameAvailableModel';
import ResponseModel from '../model/ResponseModel';
import SnapshotRestoreRequest from '../model/SnapshotRestoreRequest';
import SnapshotRetrieve from '../model/SnapshotRetrieve';
import Snapshots from '../model/Snapshots';

/**
* Snapshots service.
* @module api/SnapshotsApi
* @version v1.41.0-alpha
*/
export default class SnapshotsApi {

    /**
    * Constructs a new SnapshotsApi. 
    * @alias module:api/SnapshotsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create an image from a snapshot
     * Create a new custom image from an existing snapshot.Requires a name and any labels for your new custom image.
     * @param {Number} snapshotId 
     * @param {module:model/CreateImagePayload} payload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateImage} and HTTP response
     */
    createANewCustomImageWithHttpInfo(snapshotId, payload) {
      let postBody = payload;
      // verify the required parameter 'snapshotId' is set
      if (snapshotId === undefined || snapshotId === null) {
        throw new Error("Missing the required parameter 'snapshotId' when calling createANewCustomImage");
      }
      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling createANewCustomImage");
      }

      let pathParams = {
        'snapshot_id': snapshotId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateImage;
      return this.apiClient.callApi(
        '/core/snapshots/{snapshot_id}/image', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create an image from a snapshot
     * Create a new custom image from an existing snapshot.Requires a name and any labels for your new custom image.
     * @param {Number} snapshotId 
     * @param {module:model/CreateImagePayload} payload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateImage}
     */
    createANewCustomImage(snapshotId, payload) {
      return this.createANewCustomImageWithHttpInfo(snapshotId, payload)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete snapshot
     * Delete a snapshot. Provide the snapshot ID in the path to delete the specified snapshot. If the snapshot is connected with an image, that image will also bedeleted and the deleted image ID will be returned in the success message response.
     * @param {Number} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResponseModel} and HTTP response
     */
    deleteSnapshotWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteSnapshot");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponseModel;
      return this.apiClient.callApi(
        '/core/snapshots/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete snapshot
     * Delete a snapshot. Provide the snapshot ID in the path to delete the specified snapshot. If the snapshot is connected with an image, that image will also bedeleted and the deleted image ID will be returned in the success message response.
     * @param {Number} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResponseModel}
     */
    deleteSnapshot(id) {
      return this.deleteSnapshotWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Fetch snapshot name availability
     * Check if a Snapshot name is available
     * @param {String} name 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NameAvailableModel} and HTTP response
     */
    fetchSnapshotNameAvailabilityWithHttpInfo(name) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling fetchSnapshotNameAvailability");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NameAvailableModel;
      return this.apiClient.callApi(
        '/core/snapshots/name-availability/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Fetch snapshot name availability
     * Check if a Snapshot name is available
     * @param {String} name 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NameAvailableModel}
     */
    fetchSnapshotNameAvailability(name) {
      return this.fetchSnapshotNameAvailabilityWithHttpInfo(name)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a snapshot
     * Retrieve a snapshot.
     * @param {Number} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SnapshotRetrieve} and HTTP response
     */
    getSnapshotWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSnapshot");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SnapshotRetrieve;
      return this.apiClient.callApi(
        '/core/snapshots/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a snapshot
     * Retrieve a snapshot.
     * @param {Number} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SnapshotRetrieve}
     */
    getSnapshot(id) {
      return this.getSnapshotWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve list of snapshots with pagination
     * Retrieves a list of snapshot, providing details such as snapshot name, timestamp, VM ID, and other relevant information.
     * @param {Object} opts Optional parameters
     * @param {String} [page] Page Number
     * @param {String} [pageSize] Data Per Page
     * @param {String} [search] Search By Snapshot ID or Name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Snapshots} and HTTP response
     */
    getSnapshotsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'search': opts['search']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Snapshots;
      return this.apiClient.callApi(
        '/core/snapshots', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve list of snapshots with pagination
     * Retrieves a list of snapshot, providing details such as snapshot name, timestamp, VM ID, and other relevant information.
     * @param {Object} opts Optional parameters
     * @param {String} opts.page Page Number
     * @param {String} opts.pageSize Data Per Page
     * @param {String} opts.search Search By Snapshot ID or Name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Snapshots}
     */
    getSnapshots(opts) {
      return this.getSnapshotsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Restore a snapshot
     * Restore a snapshot.
     * @param {Number} id 
     * @param {module:model/SnapshotRestoreRequest} payload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Instance} and HTTP response
     */
    postSnapshotRestoreWithHttpInfo(id, payload) {
      let postBody = payload;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postSnapshotRestore");
      }
      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postSnapshotRestore");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Instance;
      return this.apiClient.callApi(
        '/core/snapshots/{id}/restore', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Restore a snapshot
     * Restore a snapshot.
     * @param {Number} id 
     * @param {module:model/SnapshotRestoreRequest} payload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Instance}
     */
    postSnapshotRestore(id, payload) {
      return this.postSnapshotRestoreWithHttpInfo(id, payload)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
