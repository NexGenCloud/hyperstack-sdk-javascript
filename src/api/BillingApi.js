/**
 * Infrahub-API
 * Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Billingmetricesresponse from '../model/Billingmetricesresponse';
import ErrorResponseModel from '../model/ErrorResponseModel';
import Lastdaycostresponse from '../model/Lastdaycostresponse';
import OrganizationLevelBillingHistoryResponseModel from '../model/OrganizationLevelBillingHistoryResponseModel';
import Organizationthresholdsresponse from '../model/Organizationthresholdsresponse';
import Organizationthresholdupdateresponse from '../model/Organizationthresholdupdateresponse';
import ResourceBillingEventsHistoryResponse from '../model/ResourceBillingEventsHistoryResponse';
import ResourceLevelVMBillingDetailsResponseModel from '../model/ResourceLevelVMBillingDetailsResponseModel';
import ResourceLevelVmBillingHistoryResponseModel from '../model/ResourceLevelVmBillingHistoryResponseModel';
import ResourceLevelVmGraphBillingDetailsResponseModel from '../model/ResourceLevelVmGraphBillingDetailsResponseModel';
import ResourceLevelVolumeBillingDetailsResponseModel from '../model/ResourceLevelVolumeBillingDetailsResponseModel';
import ResourceLevelVolumeBillingHistoryResponseModel from '../model/ResourceLevelVolumeBillingHistoryResponseModel';
import ResourceLevelVolumeGraphBillingDetailsResponseModel from '../model/ResourceLevelVolumeGraphBillingDetailsResponseModel';
import SubResourcesCostsResponseModel from '../model/SubResourcesCostsResponseModel';
import SubResourcesGraphResponseModel from '../model/SubResourcesGraphResponseModel';
import Subscribeorunsubscribeupdatepayload from '../model/Subscribeorunsubscribeupdatepayload';

/**
* Billing service.
* @module api/BillingApi
* @version v1.25.0-alpha
*/
export default class BillingApi {

    /**
    * Constructs a new BillingApi. 
    * @alias module:api/BillingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * GET: All Thresholds for Organization
     * Retrieve all the notification thresholds for an organization.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Organizationthresholdsresponse} and HTTP response
     */
    getAllThresholdsForOrganizationWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Organizationthresholdsresponse;
      return this.apiClient.callApi(
        '/billing/billing/threshold', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * GET: All Thresholds for Organization
     * Retrieve all the notification thresholds for an organization.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Organizationthresholdsresponse}
     */
    getAllThresholdsForOrganization() {
      return this.getAllThresholdsForOrganizationWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * GET: Billing usage
     * Retrieve active billing metrics for the organization's resources, including pricing, uptime, and total cost. Returns usage details for each active resource by defualt(`deleted=false` will return active resources). Additionally, adding `deleted=true` in query parameter will return inactive resources. For additional information on view usage costs for all resources, [**click here**](https://infrahub-doc.nexgencloud.com/docs/billing-and-payment/billing-features#view-usage-costs-for-all-resources)
     * @param {Object} opts Optional parameters
     * @param {String} [deleted] `true` will return inactive resources and `false` will return active resources. By defualt(`deleted=false`)
     * @param {String} [environment] Filter resources by environment ID or Name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Billingmetricesresponse} and HTTP response
     */
    getBillingUsageWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'deleted': opts['deleted'],
        'environment': opts['environment']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Billingmetricesresponse;
      return this.apiClient.callApi(
        '/billing/billing/usage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * GET: Billing usage
     * Retrieve active billing metrics for the organization's resources, including pricing, uptime, and total cost. Returns usage details for each active resource by defualt(`deleted=false` will return active resources). Additionally, adding `deleted=true` in query parameter will return inactive resources. For additional information on view usage costs for all resources, [**click here**](https://infrahub-doc.nexgencloud.com/docs/billing-and-payment/billing-features#view-usage-costs-for-all-resources)
     * @param {Object} opts Optional parameters
     * @param {String} opts.deleted `true` will return inactive resources and `false` will return active resources. By defualt(`deleted=false`)
     * @param {String} opts.environment Filter resources by environment ID or Name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Billingmetricesresponse}
     */
    getBillingUsage(opts) {
      return this.getBillingUsageWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * GET: Last Day Cost
     * Retrieve the previous day's costs for instances, volumes, and clusters. Returns a breakdown of the costs and the total cost for the last day. For additional information on Retrieve Previous Day Usage Costs, [**click here**](https://infrahub-doc.nexgencloud.com/docs/api-reference/billing-resources/last-day-usage/)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Lastdaycostresponse} and HTTP response
     */
    getLastDayCostWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Lastdaycostresponse;
      return this.apiClient.callApi(
        '/billing/billing/last-day-cost', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * GET: Last Day Cost
     * Retrieve the previous day's costs for instances, volumes, and clusters. Returns a breakdown of the costs and the total cost for the last day. For additional information on Retrieve Previous Day Usage Costs, [**click here**](https://infrahub-doc.nexgencloud.com/docs/api-reference/billing-resources/last-day-usage/)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Lastdaycostresponse}
     */
    getLastDayCost() {
      return this.getLastDayCostWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve Billing History for a specific Billing Cycle
     * User will recieve billing history for the specified billing cycle. This data will include 'incurred_bill', 'non_discounted_bill', 'vm_cost', 'volume_cost'
     * @param {Object} opts Optional parameters
     * @param {String} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} [graph] Set this value to \"true\" for getting graph value
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/OrganizationLevelBillingHistoryResponseModel} and HTTP response
     */
    retrieveBillingHistoryForASpecificBillingCycleWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'graph': opts['graph']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrganizationLevelBillingHistoryResponseModel;
      return this.apiClient.callApi(
        '/billing/billing/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve Billing History for a specific Billing Cycle
     * User will recieve billing history for the specified billing cycle. This data will include 'incurred_bill', 'non_discounted_bill', 'vm_cost', 'volume_cost'
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} opts.endDate Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} opts.graph Set this value to \"true\" for getting graph value
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/OrganizationLevelBillingHistoryResponseModel}
     */
    retrieveBillingHistoryForASpecificBillingCycle(opts) {
      return this.retrieveBillingHistoryForASpecificBillingCycleWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve Billing History of a Specific Snapshot for a specific Billing Cycle
     * Retrieve billing history of a specific Snapshot for the specified billing cycle. This data will include 'resource_name', 'infrahub_id', 'price_per_hour', 'incurred_bill', 'usage_time', 'non_discounted_price_per_hour', 'non_discounted_bill'.
     * @param {Number} snapshotId 
     * @param {Object} opts Optional parameters
     * @param {String} [startDate] Datetime should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} [endDate] Datetime should be formatted in YYYY-MM-DDTHH:MM:SS
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResourceLevelVolumeBillingDetailsResponseModel} and HTTP response
     */
    retrieveBillingHistoryOfASpecificSnapshotForASpecificBillingCycleWithHttpInfo(snapshotId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'snapshotId' is set
      if (snapshotId === undefined || snapshotId === null) {
        throw new Error("Missing the required parameter 'snapshotId' when calling retrieveBillingHistoryOfASpecificSnapshotForASpecificBillingCycle");
      }

      let pathParams = {
        'snapshot_id': snapshotId
      };
      let queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceLevelVolumeBillingDetailsResponseModel;
      return this.apiClient.callApi(
        '/billing/billing/history/snapshot/{snapshot_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve Billing History of a Specific Snapshot for a specific Billing Cycle
     * Retrieve billing history of a specific Snapshot for the specified billing cycle. This data will include 'resource_name', 'infrahub_id', 'price_per_hour', 'incurred_bill', 'usage_time', 'non_discounted_price_per_hour', 'non_discounted_bill'.
     * @param {Number} snapshotId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Datetime should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} opts.endDate Datetime should be formatted in YYYY-MM-DDTHH:MM:SS
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResourceLevelVolumeBillingDetailsResponseModel}
     */
    retrieveBillingHistoryOfASpecificSnapshotForASpecificBillingCycle(snapshotId, opts) {
      return this.retrieveBillingHistoryOfASpecificSnapshotForASpecificBillingCycleWithHttpInfo(snapshotId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve Billing History of a Specific Virtual Machine for a specific Billing Cycle
     * User will recieve billing history of a specific Virtual Machine for the specified billing cycle. This data will include 'resource_name', 'infrahub_id', 'price_per_hour', 'non_discounted_price_per_hour', 'incurred_bill', 'non_discounted_bill', 'usage_time', 'usage_time_ACTIVE', 'usage_time_SHUTOFF', 'usage_time_HIBERNATED'
     * @param {Number} vmId 
     * @param {Object} opts Optional parameters
     * @param {String} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResourceLevelVMBillingDetailsResponseModel} and HTTP response
     */
    retrieveBillingHistoryOfASpecificVirtualMachineForASpecificBillingCycleWithHttpInfo(vmId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling retrieveBillingHistoryOfASpecificVirtualMachineForASpecificBillingCycle");
      }

      let pathParams = {
        'vm_id': vmId
      };
      let queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceLevelVMBillingDetailsResponseModel;
      return this.apiClient.callApi(
        '/billing/billing/history/virtual-machine/{vm_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve Billing History of a Specific Virtual Machine for a specific Billing Cycle
     * User will recieve billing history of a specific Virtual Machine for the specified billing cycle. This data will include 'resource_name', 'infrahub_id', 'price_per_hour', 'non_discounted_price_per_hour', 'incurred_bill', 'non_discounted_bill', 'usage_time', 'usage_time_ACTIVE', 'usage_time_SHUTOFF', 'usage_time_HIBERNATED'
     * @param {Number} vmId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} opts.endDate Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResourceLevelVMBillingDetailsResponseModel}
     */
    retrieveBillingHistoryOfASpecificVirtualMachineForASpecificBillingCycle(vmId, opts) {
      return this.retrieveBillingHistoryOfASpecificVirtualMachineForASpecificBillingCycleWithHttpInfo(vmId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve Billing History of a Specific Volume for a specific Billing Cycle
     * Retrieve billing history of a specific Volume for the specified billing cycle. This data will include 'resource_name', 'infrahub_id', 'price_per_hour', 'incurred_bill', 'usage_time', 'non_discounted_price_per_hour', 'non_discounted_bill'.
     * @param {Number} volumeId 
     * @param {Object} opts Optional parameters
     * @param {String} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResourceLevelVolumeBillingDetailsResponseModel} and HTTP response
     */
    retrieveBillingHistoryOfASpecificVolumeForASpecificBillingCycleWithHttpInfo(volumeId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'volumeId' is set
      if (volumeId === undefined || volumeId === null) {
        throw new Error("Missing the required parameter 'volumeId' when calling retrieveBillingHistoryOfASpecificVolumeForASpecificBillingCycle");
      }

      let pathParams = {
        'volume_id': volumeId
      };
      let queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceLevelVolumeBillingDetailsResponseModel;
      return this.apiClient.callApi(
        '/billing/billing/history/volume/{volume_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve Billing History of a Specific Volume for a specific Billing Cycle
     * Retrieve billing history of a specific Volume for the specified billing cycle. This data will include 'resource_name', 'infrahub_id', 'price_per_hour', 'incurred_bill', 'usage_time', 'non_discounted_price_per_hour', 'non_discounted_bill'.
     * @param {Number} volumeId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} opts.endDate Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResourceLevelVolumeBillingDetailsResponseModel}
     */
    retrieveBillingHistoryOfASpecificVolumeForASpecificBillingCycle(volumeId, opts) {
      return this.retrieveBillingHistoryOfASpecificVolumeForASpecificBillingCycleWithHttpInfo(volumeId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve Billing History of Contract for a specific Billing Cycle
     * User will recieve billing history of contracts for the specified billing cycle. This data will include 'description', gpu_type','infrahub_id', 'status', 'incurred_bill', 'price_per_hour'
     * @param {Object} opts Optional parameters
     * @param {String} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} [search] Search by Contract \"Description\" or \"ID\"
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    retrieveBillingHistoryOfContractForASpecificBillingCycleWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'search': opts['search']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/billing/billing/history/contract', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve Billing History of Contract for a specific Billing Cycle
     * User will recieve billing history of contracts for the specified billing cycle. This data will include 'description', gpu_type','infrahub_id', 'status', 'incurred_bill', 'price_per_hour'
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} opts.endDate Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} opts.search Search by Contract \"Description\" or \"ID\"
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    retrieveBillingHistoryOfContractForASpecificBillingCycle(opts) {
      return this.retrieveBillingHistoryOfContractForASpecificBillingCycleWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve Billing History of Snapshot for a specific Billing Cycle
     * User will recieve billing history of snapshots for thespecified billing cycle. This data will include 'resource_name', 'infrahub_id', 'status', 'incurred_bill', 'usage_time', 'price_per_hour'
     * @param {Object} opts Optional parameters
     * @param {String} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} [search] Search by Volume \"Name\" or \"ID\"
     * @param {String} [page] Page number
     * @param {String} [perPage] Number of items to return per page
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResourceLevelVolumeBillingHistoryResponseModel} and HTTP response
     */
    retrieveBillingHistoryOfSnapshotForASpecificBillingCycleWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'search': opts['search'],
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceLevelVolumeBillingHistoryResponseModel;
      return this.apiClient.callApi(
        '/billing/billing/history/snapshot', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve Billing History of Snapshot for a specific Billing Cycle
     * User will recieve billing history of snapshots for thespecified billing cycle. This data will include 'resource_name', 'infrahub_id', 'status', 'incurred_bill', 'usage_time', 'price_per_hour'
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} opts.endDate Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} opts.search Search by Volume \"Name\" or \"ID\"
     * @param {String} opts.page Page number
     * @param {String} opts.perPage Number of items to return per page
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResourceLevelVolumeBillingHistoryResponseModel}
     */
    retrieveBillingHistoryOfSnapshotForASpecificBillingCycle(opts) {
      return this.retrieveBillingHistoryOfSnapshotForASpecificBillingCycleWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve Billing History of Virtual Machine for a specific Billing Cycle
     * User will recieve billing history of virtual machine for the specified billing cycle. This data will include 'resource_name', 'infrahub_id', 'status', 'incurred_bill', 'usage_time', 'price_per_hour'
     * @param {Object} opts Optional parameters
     * @param {String} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} [search] Search by Virtual Machine \"Name\" or \"ID\"
     * @param {String} [perPage] Number of items to return per page
     * @param {String} [page] Page number
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResourceLevelVmBillingHistoryResponseModel} and HTTP response
     */
    retrieveBillingHistoryOfVirtualMachineForASpecificBillingCycleWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'search': opts['search'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceLevelVmBillingHistoryResponseModel;
      return this.apiClient.callApi(
        '/billing/billing/history/virtual-machine', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve Billing History of Virtual Machine for a specific Billing Cycle
     * User will recieve billing history of virtual machine for the specified billing cycle. This data will include 'resource_name', 'infrahub_id', 'status', 'incurred_bill', 'usage_time', 'price_per_hour'
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} opts.endDate Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} opts.search Search by Virtual Machine \"Name\" or \"ID\"
     * @param {String} opts.perPage Number of items to return per page
     * @param {String} opts.page Page number
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResourceLevelVmBillingHistoryResponseModel}
     */
    retrieveBillingHistoryOfVirtualMachineForASpecificBillingCycle(opts) {
      return this.retrieveBillingHistoryOfVirtualMachineForASpecificBillingCycleWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve Billing History of Volume for a specific Billing Cycle
     * User will recieve billing history of volumes for thespecified billing cycle. This data will include 'resource_name', 'infrahub_id', 'status', 'incurred_bill', 'usage_time', 'price_per_hour'
     * @param {Object} opts Optional parameters
     * @param {String} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} [search] Search by Volume \"Name\" or \"ID\"
     * @param {String} [perPage] Number of items to return per page
     * @param {String} [page] Page number
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResourceLevelVolumeBillingHistoryResponseModel} and HTTP response
     */
    retrieveBillingHistoryOfVolumeForASpecificBillingCycleWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'search': opts['search'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceLevelVolumeBillingHistoryResponseModel;
      return this.apiClient.callApi(
        '/billing/billing/history/volume', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve Billing History of Volume for a specific Billing Cycle
     * User will recieve billing history of volumes for thespecified billing cycle. This data will include 'resource_name', 'infrahub_id', 'status', 'incurred_bill', 'usage_time', 'price_per_hour'
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} opts.endDate Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} opts.search Search by Volume \"Name\" or \"ID\"
     * @param {String} opts.perPage Number of items to return per page
     * @param {String} opts.page Page number
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResourceLevelVolumeBillingHistoryResponseModel}
     */
    retrieveBillingHistoryOfVolumeForASpecificBillingCycle(opts) {
      return this.retrieveBillingHistoryOfVolumeForASpecificBillingCycleWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve hourly cost datapoints of a Specific Snapshot for a specific billing cycle
     * User will recieve hourly cost datapoints for a Snapshot for a specified billing cycle. This data will include 'incurred_bill' graph datapoints.
     * @param {Number} snapshotId 
     * @param {Object} opts Optional parameters
     * @param {String} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResourceLevelVolumeGraphBillingDetailsResponseModel} and HTTP response
     */
    retrieveHourlyCostDatapointsOfASpecificSnapshotForASpecificBillingCycleWithHttpInfo(snapshotId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'snapshotId' is set
      if (snapshotId === undefined || snapshotId === null) {
        throw new Error("Missing the required parameter 'snapshotId' when calling retrieveHourlyCostDatapointsOfASpecificSnapshotForASpecificBillingCycle");
      }

      let pathParams = {
        'snapshot_id': snapshotId
      };
      let queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceLevelVolumeGraphBillingDetailsResponseModel;
      return this.apiClient.callApi(
        '/billing/billing/history/snapshot/{snapshot_id}/graph', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve hourly cost datapoints of a Specific Snapshot for a specific billing cycle
     * User will recieve hourly cost datapoints for a Snapshot for a specified billing cycle. This data will include 'incurred_bill' graph datapoints.
     * @param {Number} snapshotId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} opts.endDate Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResourceLevelVolumeGraphBillingDetailsResponseModel}
     */
    retrieveHourlyCostDatapointsOfASpecificSnapshotForASpecificBillingCycle(snapshotId, opts) {
      return this.retrieveHourlyCostDatapointsOfASpecificSnapshotForASpecificBillingCycleWithHttpInfo(snapshotId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve hourly cost datapoints of a Specific Virtual Machine for a specific billing cycle
     * User will recieve hourly cost datapoints for a VM for a specified billing cycle. This data will include 'incurred_bill' graph datapoints.
     * @param {Number} vmId 
     * @param {Object} opts Optional parameters
     * @param {String} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResourceLevelVmGraphBillingDetailsResponseModel} and HTTP response
     */
    retrieveHourlyCostDatapointsOfASpecificVirtualMachineForASpecificBillingCycleWithHttpInfo(vmId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling retrieveHourlyCostDatapointsOfASpecificVirtualMachineForASpecificBillingCycle");
      }

      let pathParams = {
        'vm_id': vmId
      };
      let queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceLevelVmGraphBillingDetailsResponseModel;
      return this.apiClient.callApi(
        '/billing/billing/history/virtual-machine/{vm_id}/graph', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve hourly cost datapoints of a Specific Virtual Machine for a specific billing cycle
     * User will recieve hourly cost datapoints for a VM for a specified billing cycle. This data will include 'incurred_bill' graph datapoints.
     * @param {Number} vmId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} opts.endDate Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResourceLevelVmGraphBillingDetailsResponseModel}
     */
    retrieveHourlyCostDatapointsOfASpecificVirtualMachineForASpecificBillingCycle(vmId, opts) {
      return this.retrieveHourlyCostDatapointsOfASpecificVirtualMachineForASpecificBillingCycleWithHttpInfo(vmId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve hourly cost datapoints of a Specific Volume for a specific billing cycle
     * User will recieve hourly cost datapoints for a Volume for a specified billing cycle. This data will include 'incurred_bill' graph datapoints.
     * @param {Number} volumeId 
     * @param {Object} opts Optional parameters
     * @param {String} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResourceLevelVolumeGraphBillingDetailsResponseModel} and HTTP response
     */
    retrieveHourlyCostDatapointsOfASpecificVolumeForASpecificBillingCycleWithHttpInfo(volumeId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'volumeId' is set
      if (volumeId === undefined || volumeId === null) {
        throw new Error("Missing the required parameter 'volumeId' when calling retrieveHourlyCostDatapointsOfASpecificVolumeForASpecificBillingCycle");
      }

      let pathParams = {
        'volume_id': volumeId
      };
      let queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceLevelVolumeGraphBillingDetailsResponseModel;
      return this.apiClient.callApi(
        '/billing/billing/history/volume/{volume_id}/graph', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve hourly cost datapoints of a Specific Volume for a specific billing cycle
     * User will recieve hourly cost datapoints for a Volume for a specified billing cycle. This data will include 'incurred_bill' graph datapoints.
     * @param {Number} volumeId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} opts.endDate Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResourceLevelVolumeGraphBillingDetailsResponseModel}
     */
    retrieveHourlyCostDatapointsOfASpecificVolumeForASpecificBillingCycle(volumeId, opts) {
      return this.retrieveHourlyCostDatapointsOfASpecificVolumeForASpecificBillingCycleWithHttpInfo(volumeId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve Sub-Resources Historical Cost datapoints of a Virtual
     * User will recieve sub-resources historical cost datapoints for a VM sub resources for a specified billing cycle. This data will include 'incurred_bill' graph datapoints. Machine sub resources for a specific billing cycle
     * @param {Number} vmId 
     * @param {Object} opts Optional parameters
     * @param {String} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SubResourcesGraphResponseModel} and HTTP response
     */
    retrieveSubResourcesHistoricalCostDatapointsOfAVirtualWithHttpInfo(vmId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling retrieveSubResourcesHistoricalCostDatapointsOfAVirtual");
      }

      let pathParams = {
        'vm_id': vmId
      };
      let queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubResourcesGraphResponseModel;
      return this.apiClient.callApi(
        '/billing/billing/virtual-machine/{vm_id}/sub-resource/graph', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve Sub-Resources Historical Cost datapoints of a Virtual
     * User will recieve sub-resources historical cost datapoints for a VM sub resources for a specified billing cycle. This data will include 'incurred_bill' graph datapoints. Machine sub resources for a specific billing cycle
     * @param {Number} vmId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} opts.endDate Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SubResourcesGraphResponseModel}
     */
    retrieveSubResourcesHistoricalCostDatapointsOfAVirtual(vmId, opts) {
      return this.retrieveSubResourcesHistoricalCostDatapointsOfAVirtualWithHttpInfo(vmId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve Total Costs and Non Discount Costs for Sub Resources
     * User will get total costs and non_discount costs of sub resources on a specific Virtual Machine for the specified billing cycle. on a Specific VM for the Specified Billing Cycle
     * @param {Number} vmId 
     * @param {Object} opts Optional parameters
     * @param {String} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SubResourcesCostsResponseModel} and HTTP response
     */
    retrieveTotalCostsAndNonDiscountCostsForSubResourcesWithHttpInfo(vmId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling retrieveTotalCostsAndNonDiscountCostsForSubResources");
      }

      let pathParams = {
        'vm_id': vmId
      };
      let queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubResourcesCostsResponseModel;
      return this.apiClient.callApi(
        '/billing/billing/virtual-machine/{vm_id}/sub-resource', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve Total Costs and Non Discount Costs for Sub Resources
     * User will get total costs and non_discount costs of sub resources on a specific Virtual Machine for the specified billing cycle. on a Specific VM for the Specified Billing Cycle
     * @param {Number} vmId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} opts.endDate Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SubResourcesCostsResponseModel}
     */
    retrieveTotalCostsAndNonDiscountCostsForSubResources(vmId, opts) {
      return this.retrieveTotalCostsAndNonDiscountCostsForSubResourcesWithHttpInfo(vmId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve VM billing events history
     * User will receive vm billing events history
     * @param {Number} vmId 
     * @param {Object} opts Optional parameters
     * @param {String} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResourceBillingEventsHistoryResponse} and HTTP response
     */
    retrieveVmBillingEventsHistoryWithHttpInfo(vmId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling retrieveVmBillingEventsHistory");
      }

      let pathParams = {
        'vm_id': vmId
      };
      let queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceBillingEventsHistoryResponse;
      return this.apiClient.callApi(
        '/billing/billing/virtual-machine/{vm_id}/billing-events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve VM billing events history
     * User will receive vm billing events history
     * @param {Number} vmId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} opts.endDate Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResourceBillingEventsHistoryResponse}
     */
    retrieveVmBillingEventsHistory(vmId, opts) {
      return this.retrieveVmBillingEventsHistoryWithHttpInfo(vmId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve Volume billing events history
     * User will receive volume billing events history
     * @param {Number} volumeId 
     * @param {Object} opts Optional parameters
     * @param {String} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResourceBillingEventsHistoryResponse} and HTTP response
     */
    retrieveVolumeBillingEventsHistoryWithHttpInfo(volumeId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'volumeId' is set
      if (volumeId === undefined || volumeId === null) {
        throw new Error("Missing the required parameter 'volumeId' when calling retrieveVolumeBillingEventsHistory");
      }

      let pathParams = {
        'volume_id': volumeId
      };
      let queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceBillingEventsHistoryResponse;
      return this.apiClient.callApi(
        '/billing/billing/volume/{volume_id}/billing-events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve Volume billing events history
     * User will receive volume billing events history
     * @param {Number} volumeId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} opts.endDate Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResourceBillingEventsHistoryResponse}
     */
    retrieveVolumeBillingEventsHistory(volumeId, opts) {
      return this.retrieveVolumeBillingEventsHistoryWithHttpInfo(volumeId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update: Subscribe or Unsubscribe Notification Threshold
     * By default, you are subscribed to all the threshold values and you will be receiving the email notification for these default thresholds values. `false` indicates that the user will no longer receive notifications for this specific threshold, whereas `true` signifies that the user will receive notification emails.
     * @param {Number} thresholdId 
     * @param {module:model/Subscribeorunsubscribeupdatepayload} payload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Organizationthresholdupdateresponse} and HTTP response
     */
    updateSubscribeOrUnsubscribeNotificationThresholdWithHttpInfo(thresholdId, payload) {
      let postBody = payload;
      // verify the required parameter 'thresholdId' is set
      if (thresholdId === undefined || thresholdId === null) {
        throw new Error("Missing the required parameter 'thresholdId' when calling updateSubscribeOrUnsubscribeNotificationThreshold");
      }
      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateSubscribeOrUnsubscribeNotificationThreshold");
      }

      let pathParams = {
        'threshold_id': thresholdId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'accessToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Organizationthresholdupdateresponse;
      return this.apiClient.callApi(
        '/billing/billing/threshold/{threshold_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update: Subscribe or Unsubscribe Notification Threshold
     * By default, you are subscribed to all the threshold values and you will be receiving the email notification for these default thresholds values. `false` indicates that the user will no longer receive notifications for this specific threshold, whereas `true` signifies that the user will receive notification emails.
     * @param {Number} thresholdId 
     * @param {module:model/Subscribeorunsubscribeupdatepayload} payload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Organizationthresholdupdateresponse}
     */
    updateSubscribeOrUnsubscribeNotificationThreshold(thresholdId, payload) {
      return this.updateSubscribeOrUnsubscribeNotificationThresholdWithHttpInfo(thresholdId, payload)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
