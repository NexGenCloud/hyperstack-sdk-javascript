/**
 * Infrahub-API
 * Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ClusterListResponse from '../model/ClusterListResponse';
import ClusterNodeGroupsCreateResponse from '../model/ClusterNodeGroupsCreateResponse';
import ClusterNodeGroupsGetResponse from '../model/ClusterNodeGroupsGetResponse';
import ClusterNodeGroupsListResponse from '../model/ClusterNodeGroupsListResponse';
import ClusterNodesListResponse from '../model/ClusterNodesListResponse';
import ClusterResponse from '../model/ClusterResponse';
import ClusterVersions from '../model/ClusterVersions';
import CreateClusterNodeFields from '../model/CreateClusterNodeFields';
import CreateClusterNodeGroupPayload from '../model/CreateClusterNodeGroupPayload';
import CreateClusterPayload from '../model/CreateClusterPayload';
import DeleteClusterNodesFields from '../model/DeleteClusterNodesFields';
import ErrorResponseModel from '../model/ErrorResponseModel';
import ManualReconciliationModel from '../model/ManualReconciliationModel';
import MasterFlavorsResponse from '../model/MasterFlavorsResponse';
import NameAvailableModel from '../model/NameAvailableModel';
import ResponseModel from '../model/ResponseModel';
import UpdateClusterNodeGroupPayload from '../model/UpdateClusterNodeGroupPayload';

/**
* Clusters service.
* @module api/ClustersApi
* @version v1.45.2-alpha
*/
export default class ClustersApi {

    /**
    * Constructs a new ClustersApi. 
    * @alias module:api/ClustersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Reconcile a cluster
     * @param {Number} clusterId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ManualReconciliationModel} and HTTP response
     */
    attemptToManuallyReconcileAClusterWithHttpInfo(clusterId) {
      let postBody = null;
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling attemptToManuallyReconcileACluster");
      }

      let pathParams = {
        'cluster_id': clusterId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ManualReconciliationModel;
      return this.apiClient.callApi(
        '/core/clusters/{cluster_id}/reconcile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Reconcile a cluster
     * @param {Number} clusterId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ManualReconciliationModel}
     */
    attemptToManuallyReconcileACluster(clusterId) {
      return this.attemptToManuallyReconcileAClusterWithHttpInfo(clusterId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create Cluster
     * @param {module:model/CreateClusterPayload} payload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClusterResponse} and HTTP response
     */
    createClusterWithHttpInfo(payload) {
      let postBody = payload;
      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling createCluster");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ClusterResponse;
      return this.apiClient.callApi(
        '/core/clusters', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create Cluster
     * @param {module:model/CreateClusterPayload} payload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClusterResponse}
     */
    createCluster(payload) {
      return this.createClusterWithHttpInfo(payload)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create Node
     * @param {Number} clusterId 
     * @param {module:model/CreateClusterNodeFields} payload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClusterNodesListResponse} and HTTP response
     */
    createNodeWithHttpInfo(clusterId, payload) {
      let postBody = payload;
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling createNode");
      }
      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling createNode");
      }

      let pathParams = {
        'cluster_id': clusterId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ClusterNodesListResponse;
      return this.apiClient.callApi(
        '/core/clusters/{cluster_id}/nodes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create Node
     * @param {Number} clusterId 
     * @param {module:model/CreateClusterNodeFields} payload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClusterNodesListResponse}
     */
    createNode(clusterId, payload) {
      return this.createNodeWithHttpInfo(clusterId, payload)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a node group in a cluster
     * @param {Number} clusterId 
     * @param {module:model/CreateClusterNodeGroupPayload} payload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClusterNodeGroupsCreateResponse} and HTTP response
     */
    createNodeGroupWithHttpInfo(clusterId, payload) {
      let postBody = payload;
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling createNodeGroup");
      }
      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling createNodeGroup");
      }

      let pathParams = {
        'cluster_id': clusterId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ClusterNodeGroupsCreateResponse;
      return this.apiClient.callApi(
        '/core/clusters/{cluster_id}/node-groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a node group in a cluster
     * @param {Number} clusterId 
     * @param {module:model/CreateClusterNodeGroupPayload} payload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClusterNodeGroupsCreateResponse}
     */
    createNodeGroup(clusterId, payload) {
      return this.createNodeGroupWithHttpInfo(clusterId, payload)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a cluster
     * @param {Number} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResponseModel} and HTTP response
     */
    deleteAClusterWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteACluster");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponseModel;
      return this.apiClient.callApi(
        '/core/clusters/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a cluster
     * @param {Number} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResponseModel}
     */
    deleteACluster(id) {
      return this.deleteAClusterWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a node group
     * @param {Number} clusterId 
     * @param {Number} nodeGroupId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResponseModel} and HTTP response
     */
    deleteANodeGroupWithHttpInfo(clusterId, nodeGroupId) {
      let postBody = null;
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling deleteANodeGroup");
      }
      // verify the required parameter 'nodeGroupId' is set
      if (nodeGroupId === undefined || nodeGroupId === null) {
        throw new Error("Missing the required parameter 'nodeGroupId' when calling deleteANodeGroup");
      }

      let pathParams = {
        'cluster_id': clusterId,
        'node_group_id': nodeGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponseModel;
      return this.apiClient.callApi(
        '/core/clusters/{cluster_id}/node-groups/{node_group_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a node group
     * @param {Number} clusterId 
     * @param {Number} nodeGroupId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResponseModel}
     */
    deleteANodeGroup(clusterId, nodeGroupId) {
      return this.deleteANodeGroupWithHttpInfo(clusterId, nodeGroupId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete Cluster Node
     * @param {Number} clusterId 
     * @param {Number} nodeId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResponseModel} and HTTP response
     */
    deleteClusterNodeWithHttpInfo(clusterId, nodeId) {
      let postBody = null;
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling deleteClusterNode");
      }
      // verify the required parameter 'nodeId' is set
      if (nodeId === undefined || nodeId === null) {
        throw new Error("Missing the required parameter 'nodeId' when calling deleteClusterNode");
      }

      let pathParams = {
        'cluster_id': clusterId,
        'node_id': nodeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponseModel;
      return this.apiClient.callApi(
        '/core/clusters/{cluster_id}/nodes/{node_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete Cluster Node
     * @param {Number} clusterId 
     * @param {Number} nodeId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResponseModel}
     */
    deleteClusterNode(clusterId, nodeId) {
      return this.deleteClusterNodeWithHttpInfo(clusterId, nodeId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete Multiple Cluster Nodes
     * @param {Number} clusterId 
     * @param {module:model/DeleteClusterNodesFields} payload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResponseModel} and HTTP response
     */
    deleteClusterNodesWithHttpInfo(clusterId, payload) {
      let postBody = payload;
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling deleteClusterNodes");
      }
      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling deleteClusterNodes");
      }

      let pathParams = {
        'cluster_id': clusterId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponseModel;
      return this.apiClient.callApi(
        '/core/clusters/{cluster_id}/nodes/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete Multiple Cluster Nodes
     * @param {Number} clusterId 
     * @param {module:model/DeleteClusterNodesFields} payload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResponseModel}
     */
    deleteClusterNodes(clusterId, payload) {
      return this.deleteClusterNodesWithHttpInfo(clusterId, payload)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Fetch cluster name availability
     * Check if a Cluster name is available
     * @param {String} name 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NameAvailableModel} and HTTP response
     */
    fetchClusterNameAvailabilityWithHttpInfo(name) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling fetchClusterNameAvailability");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NameAvailableModel;
      return this.apiClient.callApi(
        '/core/clusters/name-availability/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Fetch cluster name availability
     * Check if a Cluster name is available
     * @param {String} name 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NameAvailableModel}
     */
    fetchClusterNameAvailability(name) {
      return this.fetchClusterNameAvailabilityWithHttpInfo(name)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Cluster Master Flavors
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MasterFlavorsResponse} and HTTP response
     */
    getClusterMasterFlavorsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MasterFlavorsResponse;
      return this.apiClient.callApi(
        '/core/clusters/master-flavors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Cluster Master Flavors
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MasterFlavorsResponse}
     */
    getClusterMasterFlavors() {
      return this.getClusterMasterFlavorsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Cluster Nodes
     * @param {Number} clusterId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClusterNodesListResponse} and HTTP response
     */
    getClusterNodesWithHttpInfo(clusterId) {
      let postBody = null;
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling getClusterNodes");
      }

      let pathParams = {
        'cluster_id': clusterId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClusterNodesListResponse;
      return this.apiClient.callApi(
        '/core/clusters/{cluster_id}/nodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Cluster Nodes
     * @param {Number} clusterId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClusterNodesListResponse}
     */
    getClusterNodes(clusterId) {
      return this.getClusterNodesWithHttpInfo(clusterId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Cluster Versions
     * Lists available Kubernetes versions, optionally filtered by region.
     * @param {Object} opts Optional parameters
     * @param {String} [region] Filter versions by region name (optional)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClusterVersions} and HTTP response
     */
    getClusterVersionsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'region': opts['region']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClusterVersions;
      return this.apiClient.callApi(
        '/core/clusters/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Cluster Versions
     * Lists available Kubernetes versions, optionally filtered by region.
     * @param {Object} opts Optional parameters
     * @param {String} opts.region Filter versions by region name (optional)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClusterVersions}
     */
    getClusterVersions(opts) {
      return this.getClusterVersionsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Getting Cluster Detail
     * @param {Number} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClusterResponse} and HTTP response
     */
    gettingClusterDetailWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gettingClusterDetail");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClusterResponse;
      return this.apiClient.callApi(
        '/core/clusters/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Getting Cluster Detail
     * @param {Number} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClusterResponse}
     */
    gettingClusterDetail(id) {
      return this.gettingClusterDetailWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Clusters
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Page number for pagination
     * @param {Number} [pageSize] Number of items per page
     * @param {String} [environment] Environment Filter
     * @param {String} [search] Search query to filter cluster by name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClusterListResponse} and HTTP response
     */
    listClustersWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'environment': opts['environment'],
        'search': opts['search']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClusterListResponse;
      return this.apiClient.callApi(
        '/core/clusters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Clusters
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for pagination
     * @param {Number} opts.pageSize Number of items per page
     * @param {String} opts.environment Environment Filter
     * @param {String} opts.search Search query to filter cluster by name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClusterListResponse}
     */
    listClusters(opts) {
      return this.listClustersWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List node groups for a cluster
     * @param {Number} clusterId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClusterNodeGroupsListResponse} and HTTP response
     */
    listNodeGroupsWithHttpInfo(clusterId) {
      let postBody = null;
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling listNodeGroups");
      }

      let pathParams = {
        'cluster_id': clusterId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClusterNodeGroupsListResponse;
      return this.apiClient.callApi(
        '/core/clusters/{cluster_id}/node-groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List node groups for a cluster
     * @param {Number} clusterId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClusterNodeGroupsListResponse}
     */
    listNodeGroups(clusterId) {
      return this.listNodeGroupsWithHttpInfo(clusterId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a node group in a cluster
     * @param {Number} clusterId 
     * @param {Number} nodeGroupId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClusterNodeGroupsGetResponse} and HTTP response
     */
    retrieveANodeGroupWithHttpInfo(clusterId, nodeGroupId) {
      let postBody = null;
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling retrieveANodeGroup");
      }
      // verify the required parameter 'nodeGroupId' is set
      if (nodeGroupId === undefined || nodeGroupId === null) {
        throw new Error("Missing the required parameter 'nodeGroupId' when calling retrieveANodeGroup");
      }

      let pathParams = {
        'cluster_id': clusterId,
        'node_group_id': nodeGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClusterNodeGroupsGetResponse;
      return this.apiClient.callApi(
        '/core/clusters/{cluster_id}/node-groups/{node_group_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a node group in a cluster
     * @param {Number} clusterId 
     * @param {Number} nodeGroupId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClusterNodeGroupsGetResponse}
     */
    retrieveANodeGroup(clusterId, nodeGroupId) {
      return this.retrieveANodeGroupWithHttpInfo(clusterId, nodeGroupId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a node group in a cluster
     * @param {Number} clusterId 
     * @param {Number} nodeGroupId 
     * @param {module:model/UpdateClusterNodeGroupPayload} payload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClusterNodeGroupsCreateResponse} and HTTP response
     */
    updateANodeGroupWithHttpInfo(clusterId, nodeGroupId, payload) {
      let postBody = payload;
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling updateANodeGroup");
      }
      // verify the required parameter 'nodeGroupId' is set
      if (nodeGroupId === undefined || nodeGroupId === null) {
        throw new Error("Missing the required parameter 'nodeGroupId' when calling updateANodeGroup");
      }
      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateANodeGroup");
      }

      let pathParams = {
        'cluster_id': clusterId,
        'node_group_id': nodeGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ClusterNodeGroupsCreateResponse;
      return this.apiClient.callApi(
        '/core/clusters/{cluster_id}/node-groups/{node_group_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a node group in a cluster
     * @param {Number} clusterId 
     * @param {Number} nodeGroupId 
     * @param {module:model/UpdateClusterNodeGroupPayload} payload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClusterNodeGroupsCreateResponse}
     */
    updateANodeGroup(clusterId, nodeGroupId, payload) {
      return this.updateANodeGroupWithHttpInfo(clusterId, nodeGroupId, payload)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
