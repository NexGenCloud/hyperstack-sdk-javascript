/**
 * Infrahub-API
 * Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AttachVolumes from '../model/AttachVolumes';
import AttachVolumesPayload from '../model/AttachVolumesPayload';
import DetachVolumes from '../model/DetachVolumes';
import DetachVolumesPayload from '../model/DetachVolumesPayload';
import ErrorResponseModel from '../model/ErrorResponseModel';

/**
* VolumeAttachment service.
* @module api/VolumeAttachmentApi
* @version v1.25.0-alpha
*/
export default class VolumeAttachmentApi {

    /**
    * Constructs a new VolumeAttachmentApi. 
    * @alias module:api/VolumeAttachmentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Attach volumes to virtual machine
     * Attaches one or more volumes to an existing virtual machine, expanding its storage capacity by 2PB per attached volume. Include the virtual machine ID in the path and the volume IDs in the request body to attach the specified volumes to the designated virtual machine. For additional details on volume attachment, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/volumes-available-features#attach-a-volume-to-a-virtual-machine-1).
     * @param {Number} virtualMachineId 
     * @param {module:model/AttachVolumesPayload} payload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AttachVolumes} and HTTP response
     */
    attachVolumesToVirtualMachineWithHttpInfo(virtualMachineId, payload) {
      let postBody = payload;
      // verify the required parameter 'virtualMachineId' is set
      if (virtualMachineId === undefined || virtualMachineId === null) {
        throw new Error("Missing the required parameter 'virtualMachineId' when calling attachVolumesToVirtualMachine");
      }
      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling attachVolumesToVirtualMachine");
      }

      let pathParams = {
        'virtual_machine_id': virtualMachineId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'accessToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AttachVolumes;
      return this.apiClient.callApi(
        '/core/virtual-machines/{virtual_machine_id}/attach-volumes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Attach volumes to virtual machine
     * Attaches one or more volumes to an existing virtual machine, expanding its storage capacity by 2PB per attached volume. Include the virtual machine ID in the path and the volume IDs in the request body to attach the specified volumes to the designated virtual machine. For additional details on volume attachment, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/volumes-available-features#attach-a-volume-to-a-virtual-machine-1).
     * @param {Number} virtualMachineId 
     * @param {module:model/AttachVolumesPayload} payload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AttachVolumes}
     */
    attachVolumesToVirtualMachine(virtualMachineId, payload) {
      return this.attachVolumesToVirtualMachineWithHttpInfo(virtualMachineId, payload)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Detach volumes from virtual machine
     * Detaches one or more volumes currently attached to an existing virtual machine. Include the virtual machine ID in the path and the volume IDs in the request body to detach the specified volumes from the designated virtual machine.
     * @param {Number} virtualMachineId 
     * @param {module:model/DetachVolumesPayload} payload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DetachVolumes} and HTTP response
     */
    detachVolumesFromVirtualMachineWithHttpInfo(virtualMachineId, payload) {
      let postBody = payload;
      // verify the required parameter 'virtualMachineId' is set
      if (virtualMachineId === undefined || virtualMachineId === null) {
        throw new Error("Missing the required parameter 'virtualMachineId' when calling detachVolumesFromVirtualMachine");
      }
      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling detachVolumesFromVirtualMachine");
      }

      let pathParams = {
        'virtual_machine_id': virtualMachineId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'accessToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DetachVolumes;
      return this.apiClient.callApi(
        '/core/virtual-machines/{virtual_machine_id}/detach-volumes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Detach volumes from virtual machine
     * Detaches one or more volumes currently attached to an existing virtual machine. Include the virtual machine ID in the path and the volume IDs in the request body to detach the specified volumes from the designated virtual machine.
     * @param {Number} virtualMachineId 
     * @param {module:model/DetachVolumesPayload} payload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DetachVolumes}
     */
    detachVolumesFromVirtualMachine(virtualMachineId, payload) {
      return this.detachVolumesFromVirtualMachineWithHttpInfo(virtualMachineId, payload)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
