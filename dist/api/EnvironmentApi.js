"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _CreateEnvironment = _interopRequireDefault(require("../model/CreateEnvironment"));
var _Environment = _interopRequireDefault(require("../model/Environment"));
var _Environments = _interopRequireDefault(require("../model/Environments"));
var _ErrorResponseModel = _interopRequireDefault(require("../model/ErrorResponseModel"));
var _NameAvailableModel = _interopRequireDefault(require("../model/NameAvailableModel"));
var _ResponseModel = _interopRequireDefault(require("../model/ResponseModel"));
var _UpdateEnvironment = _interopRequireDefault(require("../model/UpdateEnvironment"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Infrahub-API
 * Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
* Environment service.
* @module api/EnvironmentApi
* @version v1.42.0-alpha
*/
var EnvironmentApi = exports["default"] = /*#__PURE__*/function () {
  /**
  * Constructs a new EnvironmentApi. 
  * @alias module:api/EnvironmentApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function EnvironmentApi(apiClient) {
    _classCallCheck(this, EnvironmentApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
   * Create environment
   * Creates an environment—a container to organize your resources, including SSH key pairs, virtual machines, and volumes. To create your environment, provide your desired environment name, and [**region**](https://docs.hyperstack.cloud/docs/resource-management/regions/) in the request body.
   * @param {module:model/CreateEnvironment} payload 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Environment} and HTTP response
   */
  return _createClass(EnvironmentApi, [{
    key: "createEnvironmentWithHttpInfo",
    value: function createEnvironmentWithHttpInfo(payload) {
      var postBody = payload;
      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling createEnvironment");
      }
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _Environment["default"];
      return this.apiClient.callApi('/core/environments', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Create environment
     * Creates an environment—a container to organize your resources, including SSH key pairs, virtual machines, and volumes. To create your environment, provide your desired environment name, and [**region**](https://docs.hyperstack.cloud/docs/resource-management/regions/) in the request body.
     * @param {module:model/CreateEnvironment} payload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Environment}
     */
  }, {
    key: "createEnvironment",
    value: function createEnvironment(payload) {
      return this.createEnvironmentWithHttpInfo(payload).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Delete environment
     * Deletes an environment permanently. Provide the environment ID in the path to remove the specified environment.
     * @param {Number} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResponseModel} and HTTP response
     */
  }, {
    key: "deleteEnvironmentWithHttpInfo",
    value: function deleteEnvironmentWithHttpInfo(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteEnvironment");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ResponseModel["default"];
      return this.apiClient.callApi('/core/environments/{id}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Delete environment
     * Deletes an environment permanently. Provide the environment ID in the path to remove the specified environment.
     * @param {Number} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResponseModel}
     */
  }, {
    key: "deleteEnvironment",
    value: function deleteEnvironment(id) {
      return this.deleteEnvironmentWithHttpInfo(id).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Fetch environment name availability
     * Check if a Environment name is available
     * @param {String} name 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NameAvailableModel} and HTTP response
     */
  }, {
    key: "fetchEnvironmentNameAvailabilityWithHttpInfo",
    value: function fetchEnvironmentNameAvailabilityWithHttpInfo(name) {
      var postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling fetchEnvironmentNameAvailability");
      }
      var pathParams = {
        'name': name
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _NameAvailableModel["default"];
      return this.apiClient.callApi('/core/environments/name-availability/{name}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Fetch environment name availability
     * Check if a Environment name is available
     * @param {String} name 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NameAvailableModel}
     */
  }, {
    key: "fetchEnvironmentNameAvailability",
    value: function fetchEnvironmentNameAvailability(name) {
      return this.fetchEnvironmentNameAvailabilityWithHttpInfo(name).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * List environments
     * Returns a list of your existing environments, providing the following details for each; environment ID, name, [**region**](https://docs.hyperstack.cloud/docs/api-reference/core-resources/environments/), and the date and time of creation. For more information on environments, [**click here**](https://docs.hyperstack.cloud/docs/api-reference/core-resources/environments/).
     * @param {Object} opts Optional parameters
     * @param {String} [page] Page Number
     * @param {String} [pageSize] Data Per Page
     * @param {String} [search] Search By ID or Name or Region
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Environments} and HTTP response
     */
  }, {
    key: "listEnvironmentsWithHttpInfo",
    value: function listEnvironmentsWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'search': opts['search']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _Environments["default"];
      return this.apiClient.callApi('/core/environments', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * List environments
     * Returns a list of your existing environments, providing the following details for each; environment ID, name, [**region**](https://docs.hyperstack.cloud/docs/api-reference/core-resources/environments/), and the date and time of creation. For more information on environments, [**click here**](https://docs.hyperstack.cloud/docs/api-reference/core-resources/environments/).
     * @param {Object} opts Optional parameters
     * @param {String} opts.page Page Number
     * @param {String} opts.pageSize Data Per Page
     * @param {String} opts.search Search By ID or Name or Region
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Environments}
     */
  }, {
    key: "listEnvironments",
    value: function listEnvironments(opts) {
      return this.listEnvironmentsWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Retrieve environment
     * Retrieves details about a specific environment. Provide the environment ID in the path and the new environment `name` in the request body to modify the specified environment.
     * @param {Number} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Environment} and HTTP response
     */
  }, {
    key: "retrieveEnvironmentWithHttpInfo",
    value: function retrieveEnvironmentWithHttpInfo(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling retrieveEnvironment");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _Environment["default"];
      return this.apiClient.callApi('/core/environments/{id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Retrieve environment
     * Retrieves details about a specific environment. Provide the environment ID in the path and the new environment `name` in the request body to modify the specified environment.
     * @param {Number} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Environment}
     */
  }, {
    key: "retrieveEnvironment",
    value: function retrieveEnvironment(id) {
      return this.retrieveEnvironmentWithHttpInfo(id).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Update environment
     * Updates the name of an existing environment. Provide the environment ID in the path and the new environment `name` in the request body to modify the specified environment.
     * @param {Number} id 
     * @param {module:model/UpdateEnvironment} payload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Environment} and HTTP response
     */
  }, {
    key: "updateEnvironmentWithHttpInfo",
    value: function updateEnvironmentWithHttpInfo(id, payload) {
      var postBody = payload;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateEnvironment");
      }
      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateEnvironment");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _Environment["default"];
      return this.apiClient.callApi('/core/environments/{id}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Update environment
     * Updates the name of an existing environment. Provide the environment ID in the path and the new environment `name` in the request body to modify the specified environment.
     * @param {Number} id 
     * @param {module:model/UpdateEnvironment} payload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Environment}
     */
  }, {
    key: "updateEnvironment",
    value: function updateEnvironment(id, payload) {
      return this.updateEnvironmentWithHttpInfo(id, payload).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
}();