"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _ErrorResponseModel = _interopRequireDefault(require("../model/ErrorResponseModel"));
var _ResponseModel = _interopRequireDefault(require("../model/ResponseModel"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Infrahub-API
 * Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
* FloatingIp service.
* @module api/FloatingIpApi
* @version v1.41.2-alpha
*/
var FloatingIpApi = exports["default"] = /*#__PURE__*/function () {
  /**
  * Constructs a new FloatingIpApi. 
  * @alias module:api/FloatingIpApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function FloatingIpApi(apiClient) {
    _classCallCheck(this, FloatingIpApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
   * Attach public IP to virtual machine
   * Initiates the creation of a public IP address and attaches it to an existing virtual machine, making it accessible through the internet. Include the virtual machine ID in the path to attach a public IP to the specified VM. For more information on public IP addresses, [**click here**](https://docs.hyperstack.cloud/docs/api-reference/core-resources/virtual-machines/floating-ip/attach-floating-ip/).
   * @param {Number} vmId 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResponseModel} and HTTP response
   */
  return _createClass(FloatingIpApi, [{
    key: "attachPublicIPToVirtualMachineWithHttpInfo",
    value: function attachPublicIPToVirtualMachineWithHttpInfo(vmId) {
      var postBody = null;
      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling attachPublicIPToVirtualMachine");
      }
      var pathParams = {
        'vm_id': vmId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ResponseModel["default"];
      return this.apiClient.callApi('/core/virtual-machines/{vm_id}/attach-floatingip', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Attach public IP to virtual machine
     * Initiates the creation of a public IP address and attaches it to an existing virtual machine, making it accessible through the internet. Include the virtual machine ID in the path to attach a public IP to the specified VM. For more information on public IP addresses, [**click here**](https://docs.hyperstack.cloud/docs/api-reference/core-resources/virtual-machines/floating-ip/attach-floating-ip/).
     * @param {Number} vmId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResponseModel}
     */
  }, {
    key: "attachPublicIPToVirtualMachine",
    value: function attachPublicIPToVirtualMachine(vmId) {
      return this.attachPublicIPToVirtualMachineWithHttpInfo(vmId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Detach public IP from virtual machine
     * Removes a public IP address from an existing virtual machine, disabling internet accessibility to the VM. Include the virtual machine ID in the path to detach the public IP from the specified VM. For more information on public IP addresses, [**click here**](https://docs.hyperstack.cloud/docs/virtual-machines/public-ip).
     * @param {Number} vmId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResponseModel} and HTTP response
     */
  }, {
    key: "detachPublicIPFromVirtualMachineWithHttpInfo",
    value: function detachPublicIPFromVirtualMachineWithHttpInfo(vmId) {
      var postBody = null;
      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling detachPublicIPFromVirtualMachine");
      }
      var pathParams = {
        'vm_id': vmId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ResponseModel["default"];
      return this.apiClient.callApi('/core/virtual-machines/{vm_id}/detach-floatingip', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Detach public IP from virtual machine
     * Removes a public IP address from an existing virtual machine, disabling internet accessibility to the VM. Include the virtual machine ID in the path to detach the public IP from the specified VM. For more information on public IP addresses, [**click here**](https://docs.hyperstack.cloud/docs/virtual-machines/public-ip).
     * @param {Number} vmId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResponseModel}
     */
  }, {
    key: "detachPublicIPFromVirtualMachine",
    value: function detachPublicIPFromVirtualMachine(vmId) {
      return this.detachPublicIPFromVirtualMachineWithHttpInfo(vmId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
}();