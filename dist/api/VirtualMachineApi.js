"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _AttachFirewallsToVMPayload = _interopRequireDefault(require("../model/AttachFirewallsToVMPayload"));
var _ContractInstancesResponse = _interopRequireDefault(require("../model/ContractInstancesResponse"));
var _CreateInstancesPayload = _interopRequireDefault(require("../model/CreateInstancesPayload"));
var _CreateInstancesResponse = _interopRequireDefault(require("../model/CreateInstancesResponse"));
var _CreateSecurityRulePayload = _interopRequireDefault(require("../model/CreateSecurityRulePayload"));
var _CreateSnapshotPayload = _interopRequireDefault(require("../model/CreateSnapshotPayload"));
var _CreateSnapshotResponse = _interopRequireDefault(require("../model/CreateSnapshotResponse"));
var _EditLabelOfAnExistingVMPayload = _interopRequireDefault(require("../model/EditLabelOfAnExistingVMPayload"));
var _ErrorResponseModel = _interopRequireDefault(require("../model/ErrorResponseModel"));
var _GetInstanceLogsResponse = _interopRequireDefault(require("../model/GetInstanceLogsResponse"));
var _Instance = _interopRequireDefault(require("../model/Instance"));
var _InstanceResizePayload = _interopRequireDefault(require("../model/InstanceResizePayload"));
var _Instances = _interopRequireDefault(require("../model/Instances"));
var _MetricsFields = _interopRequireDefault(require("../model/MetricsFields"));
var _NameAvailableModel = _interopRequireDefault(require("../model/NameAvailableModel"));
var _RequestInstanceLogsPayload = _interopRequireDefault(require("../model/RequestInstanceLogsPayload"));
var _RequestInstanceLogsResponse = _interopRequireDefault(require("../model/RequestInstanceLogsResponse"));
var _ResponseModel = _interopRequireDefault(require("../model/ResponseModel"));
var _SecurityGroupRule = _interopRequireDefault(require("../model/SecurityGroupRule"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Infrahub-API
 * Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
* VirtualMachine service.
* @module api/VirtualMachineApi
* @version v1.43.0-alpha
*/
var VirtualMachineApi = exports["default"] = /*#__PURE__*/function () {
  /**
  * Constructs a new VirtualMachineApi. 
  * @alias module:api/VirtualMachineApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function VirtualMachineApi(apiClient) {
    _classCallCheck(this, VirtualMachineApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
   * Attach firewalls to a virtual machine
   * Attach firewalls to a virtual machine by providing the virtual machine ID in the path and the IDs of the firewalls in the request body; any firewalls not included will be detached.
   * @param {Number} vmId 
   * @param {module:model/AttachFirewallsToVMPayload} payload 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResponseModel} and HTTP response
   */
  return _createClass(VirtualMachineApi, [{
    key: "attachFirewallsToAVirtualMachineWithHttpInfo",
    value: function attachFirewallsToAVirtualMachineWithHttpInfo(vmId, payload) {
      var postBody = payload;
      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling attachFirewallsToAVirtualMachine");
      }
      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling attachFirewallsToAVirtualMachine");
      }
      var pathParams = {
        'vm_id': vmId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ResponseModel["default"];
      return this.apiClient.callApi('/core/virtual-machines/{vm_id}/attach-firewalls', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Attach firewalls to a virtual machine
     * Attach firewalls to a virtual machine by providing the virtual machine ID in the path and the IDs of the firewalls in the request body; any firewalls not included will be detached.
     * @param {Number} vmId 
     * @param {module:model/AttachFirewallsToVMPayload} payload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResponseModel}
     */
  }, {
    key: "attachFirewallsToAVirtualMachine",
    value: function attachFirewallsToAVirtualMachine(vmId, payload) {
      return this.attachFirewallsToAVirtualMachineWithHttpInfo(vmId, payload).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Create virtual machines
     * Creates one or more virtual machines with the specified custom configuration and features provided in the request body. For more information about the virtual machine features offered by Infrahub, [**click here**](https://docs.hyperstack.cloud/docs/virtual-machines/virtual-machine-features#create-a-virtual-machine-with-custom-features).
     * @param {module:model/CreateInstancesPayload} payload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateInstancesResponse} and HTTP response
     */
  }, {
    key: "createOneOrMoreVirtualMachinesWithHttpInfo",
    value: function createOneOrMoreVirtualMachinesWithHttpInfo(payload) {
      var postBody = payload;
      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling createOneOrMoreVirtualMachines");
      }
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateInstancesResponse["default"];
      return this.apiClient.callApi('/core/virtual-machines', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Create virtual machines
     * Creates one or more virtual machines with the specified custom configuration and features provided in the request body. For more information about the virtual machine features offered by Infrahub, [**click here**](https://docs.hyperstack.cloud/docs/virtual-machines/virtual-machine-features#create-a-virtual-machine-with-custom-features).
     * @param {module:model/CreateInstancesPayload} payload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateInstancesResponse}
     */
  }, {
    key: "createOneOrMoreVirtualMachines",
    value: function createOneOrMoreVirtualMachines(payload) {
      return this.createOneOrMoreVirtualMachinesWithHttpInfo(payload).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Delete firewall rule from virtual machine
     * Deletes a firewall rule associated with a virtual machine. Provide the virtual machine ID and the firewall rule ID in the path to remove the specified rule from the specified virtual machine.
     * @param {Number} vmId 
     * @param {Number} sgRuleId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResponseModel} and HTTP response
     */
  }, {
    key: "deleteSecurityRuleWithHttpInfo",
    value: function deleteSecurityRuleWithHttpInfo(vmId, sgRuleId) {
      var postBody = null;
      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling deleteSecurityRule");
      }
      // verify the required parameter 'sgRuleId' is set
      if (sgRuleId === undefined || sgRuleId === null) {
        throw new Error("Missing the required parameter 'sgRuleId' when calling deleteSecurityRule");
      }
      var pathParams = {
        'vm_id': vmId,
        'sg_rule_id': sgRuleId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ResponseModel["default"];
      return this.apiClient.callApi('/core/virtual-machines/{vm_id}/sg-rules/{sg_rule_id}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Delete firewall rule from virtual machine
     * Deletes a firewall rule associated with a virtual machine. Provide the virtual machine ID and the firewall rule ID in the path to remove the specified rule from the specified virtual machine.
     * @param {Number} vmId 
     * @param {Number} sgRuleId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResponseModel}
     */
  }, {
    key: "deleteSecurityRule",
    value: function deleteSecurityRule(vmId, sgRuleId) {
      return this.deleteSecurityRuleWithHttpInfo(vmId, sgRuleId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Delete virtual machine
     * Permanently deletes a virtual machine. Provide the virtual machine ID in the path to delete the specified virtual machine.
     * @param {Number} vmId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResponseModel} and HTTP response
     */
  }, {
    key: "deleteVirtualMachineWithHttpInfo",
    value: function deleteVirtualMachineWithHttpInfo(vmId) {
      var postBody = null;
      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling deleteVirtualMachine");
      }
      var pathParams = {
        'vm_id': vmId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ResponseModel["default"];
      return this.apiClient.callApi('/core/virtual-machines/{vm_id}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Delete virtual machine
     * Permanently deletes a virtual machine. Provide the virtual machine ID in the path to delete the specified virtual machine.
     * @param {Number} vmId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResponseModel}
     */
  }, {
    key: "deleteVirtualMachine",
    value: function deleteVirtualMachine(vmId) {
      return this.deleteVirtualMachineWithHttpInfo(vmId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Fetch virtual machine name availability
     * Check if a Virtual Machine name is available
     * @param {String} name 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NameAvailableModel} and HTTP response
     */
  }, {
    key: "fetchVirtualMachineNameAvailabilityWithHttpInfo",
    value: function fetchVirtualMachineNameAvailabilityWithHttpInfo(name) {
      var postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling fetchVirtualMachineNameAvailability");
      }
      var pathParams = {
        'name': name
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _NameAvailableModel["default"];
      return this.apiClient.callApi('/core/virtual-machines/name-availability/{name}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Fetch virtual machine name availability
     * Check if a Virtual Machine name is available
     * @param {String} name 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NameAvailableModel}
     */
  }, {
    key: "fetchVirtualMachineNameAvailability",
    value: function fetchVirtualMachineNameAvailability(name) {
      return this.fetchVirtualMachineNameAvailabilityWithHttpInfo(name).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Hard reboot virtual machine
     * Initiates a hard reboot for a virtual machine, simulating the process of unplugging and rebooting a physical machine. Provide the virtual machine ID in the path to execute a hard reboot for the specified virtual machine.
     * @param {Number} vmId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResponseModel} and HTTP response
     */
  }, {
    key: "getInstanceHardRebootWithHttpInfo",
    value: function getInstanceHardRebootWithHttpInfo(vmId) {
      var postBody = null;
      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling getInstanceHardReboot");
      }
      var pathParams = {
        'vm_id': vmId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ResponseModel["default"];
      return this.apiClient.callApi('/core/virtual-machines/{vm_id}/hard-reboot', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Hard reboot virtual machine
     * Initiates a hard reboot for a virtual machine, simulating the process of unplugging and rebooting a physical machine. Provide the virtual machine ID in the path to execute a hard reboot for the specified virtual machine.
     * @param {Number} vmId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResponseModel}
     */
  }, {
    key: "getInstanceHardReboot",
    value: function getInstanceHardReboot(vmId) {
      return this.getInstanceHardRebootWithHttpInfo(vmId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Hibernate virtual machine
     * Initiates the hibernation of a virtual machine, saving its current state to disk before powering off. Provide the virtual machine ID in the path to specify the virtual machine to be hibernated.
     * @param {Number} vmId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResponseModel} and HTTP response
     */
  }, {
    key: "getInstanceHibernateWithHttpInfo",
    value: function getInstanceHibernateWithHttpInfo(vmId) {
      var postBody = null;
      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling getInstanceHibernate");
      }
      var pathParams = {
        'vm_id': vmId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ResponseModel["default"];
      return this.apiClient.callApi('/core/virtual-machines/{vm_id}/hibernate', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Hibernate virtual machine
     * Initiates the hibernation of a virtual machine, saving its current state to disk before powering off. Provide the virtual machine ID in the path to specify the virtual machine to be hibernated.
     * @param {Number} vmId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResponseModel}
     */
  }, {
    key: "getInstanceHibernate",
    value: function getInstanceHibernate(vmId) {
      return this.getInstanceHibernateWithHttpInfo(vmId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Restore virtual machine from hibernation
     * Resumes a virtual machine from hibernation, bringing it back to an active state. Provide the virtual machine ID that you want to restore from hibernation.
     * @param {Number} vmId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResponseModel} and HTTP response
     */
  }, {
    key: "getInstanceHibernateRestoreWithHttpInfo",
    value: function getInstanceHibernateRestoreWithHttpInfo(vmId) {
      var postBody = null;
      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling getInstanceHibernateRestore");
      }
      var pathParams = {
        'vm_id': vmId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ResponseModel["default"];
      return this.apiClient.callApi('/core/virtual-machines/{vm_id}/hibernate-restore', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Restore virtual machine from hibernation
     * Resumes a virtual machine from hibernation, bringing it back to an active state. Provide the virtual machine ID that you want to restore from hibernation.
     * @param {Number} vmId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResponseModel}
     */
  }, {
    key: "getInstanceHibernateRestore",
    value: function getInstanceHibernateRestore(vmId) {
      return this.getInstanceHibernateRestoreWithHttpInfo(vmId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get virtual machine logs
     * Retrieve console logs for a virtual machine
     * @param {Number} vmId 
     * @param {Number} requestId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetInstanceLogsResponse} and HTTP response
     */
  }, {
    key: "getInstanceLogsWithHttpInfo",
    value: function getInstanceLogsWithHttpInfo(vmId, requestId) {
      var postBody = null;
      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling getInstanceLogs");
      }
      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling getInstanceLogs");
      }
      var pathParams = {
        'vm_id': vmId
      };
      var queryParams = {
        'request_id': requestId
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _GetInstanceLogsResponse["default"];
      return this.apiClient.callApi('/core/virtual-machines/{vm_id}/logs', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Get virtual machine logs
     * Retrieve console logs for a virtual machine
     * @param {Number} vmId 
     * @param {Number} requestId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetInstanceLogsResponse}
     */
  }, {
    key: "getInstanceLogs",
    value: function getInstanceLogs(vmId, requestId) {
      return this.getInstanceLogsWithHttpInfo(vmId, requestId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Retrieve virtual machine performance metrics
     * Retrieves performance metrics data for a virtual machine. Provide the virtual machine ID in the path to retrieve the following data for the specified virtual machine: CPU usage, memory usage (RAM), `network.in`, `network.out`, `disk.read`, and `disk.write`. The optional `duration` parameter can be used to specify the period for retrieving performance metrics; the default value will retrieve all available data. To learn more about virtual machine performance metrics, [**click here**](https://docs.hyperstack.cloud/docs/virtual-machines/vm-performance-metrics-and-events-history#performance-metrics).
     * @param {Number} vmId 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [duration] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MetricsFields} and HTTP response
     */
  }, {
    key: "getInstanceMetricsWithHttpInfo",
    value: function getInstanceMetricsWithHttpInfo(vmId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling getInstanceMetrics");
      }
      var pathParams = {
        'vm_id': vmId
      };
      var queryParams = {
        'duration': opts['duration']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _MetricsFields["default"];
      return this.apiClient.callApi('/core/virtual-machines/{vm_id}/metrics', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Retrieve virtual machine performance metrics
     * Retrieves performance metrics data for a virtual machine. Provide the virtual machine ID in the path to retrieve the following data for the specified virtual machine: CPU usage, memory usage (RAM), `network.in`, `network.out`, `disk.read`, and `disk.write`. The optional `duration` parameter can be used to specify the period for retrieving performance metrics; the default value will retrieve all available data. To learn more about virtual machine performance metrics, [**click here**](https://docs.hyperstack.cloud/docs/virtual-machines/vm-performance-metrics-and-events-history#performance-metrics).
     * @param {Number} vmId 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.duration 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MetricsFields}
     */
  }, {
    key: "getInstanceMetrics",
    value: function getInstanceMetrics(vmId, opts) {
      return this.getInstanceMetricsWithHttpInfo(vmId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Start virtual machine
     * Initiates the startup of a virtual machine. Provide the virtual machine ID in the path to initiate the starting of the specified virtual machine.
     * @param {Number} vmId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResponseModel} and HTTP response
     */
  }, {
    key: "getInstanceStartWithHttpInfo",
    value: function getInstanceStartWithHttpInfo(vmId) {
      var postBody = null;
      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling getInstanceStart");
      }
      var pathParams = {
        'vm_id': vmId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ResponseModel["default"];
      return this.apiClient.callApi('/core/virtual-machines/{vm_id}/start', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Start virtual machine
     * Initiates the startup of a virtual machine. Provide the virtual machine ID in the path to initiate the starting of the specified virtual machine.
     * @param {Number} vmId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResponseModel}
     */
  }, {
    key: "getInstanceStart",
    value: function getInstanceStart(vmId) {
      return this.getInstanceStartWithHttpInfo(vmId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Stop virtual machine
     * Shuts down a virtual machine. Provide the virtual machine ID in the path to initiate the shutdown process for the specified virtual machine.
     * @param {Number} vmId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResponseModel} and HTTP response
     */
  }, {
    key: "getInstanceStopWithHttpInfo",
    value: function getInstanceStopWithHttpInfo(vmId) {
      var postBody = null;
      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling getInstanceStop");
      }
      var pathParams = {
        'vm_id': vmId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ResponseModel["default"];
      return this.apiClient.callApi('/core/virtual-machines/{vm_id}/stop', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Stop virtual machine
     * Shuts down a virtual machine. Provide the virtual machine ID in the path to initiate the shutdown process for the specified virtual machine.
     * @param {Number} vmId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResponseModel}
     */
  }, {
    key: "getInstanceStop",
    value: function getInstanceStop(vmId) {
      return this.getInstanceStopWithHttpInfo(vmId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * List virtual machines
     * Returns a list of your existing virtual machines, providing configuration details for each. The list is sorted by creation date, with the oldest virtual machines displayed first.
     * @param {Object} opts Optional parameters
     * @param {Number} [page] 
     * @param {Number} [pageSize] 
     * @param {String} [search] 
     * @param {String} [environment] 
     * @param {Array.<Number>} [excludeFirewalls] Comma-separated list of Security Group IDs to ignore instances attached
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Instances} and HTTP response
     */
  }, {
    key: "listVirtualMachinesWithHttpInfo",
    value: function listVirtualMachinesWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'search': opts['search'],
        'environment': opts['environment'],
        'exclude_firewalls': this.apiClient.buildCollectionParam(opts['excludeFirewalls'], 'multi')
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _Instances["default"];
      return this.apiClient.callApi('/core/virtual-machines', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * List virtual machines
     * Returns a list of your existing virtual machines, providing configuration details for each. The list is sorted by creation date, with the oldest virtual machines displayed first.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.pageSize 
     * @param {String} opts.search 
     * @param {String} opts.environment 
     * @param {Array.<Number>} opts.excludeFirewalls Comma-separated list of Security Group IDs to ignore instances attached
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Instances}
     */
  }, {
    key: "listVirtualMachines",
    value: function listVirtualMachines(opts) {
      return this.listVirtualMachinesWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Request virtual machine logs
     * Request console logs for a virtual machine
     * @param {Number} vmId 
     * @param {module:model/RequestInstanceLogsPayload} payload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RequestInstanceLogsResponse} and HTTP response
     */
  }, {
    key: "postInstanceLogsWithHttpInfo",
    value: function postInstanceLogsWithHttpInfo(vmId, payload) {
      var postBody = payload;
      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling postInstanceLogs");
      }
      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postInstanceLogs");
      }
      var pathParams = {
        'vm_id': vmId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _RequestInstanceLogsResponse["default"];
      return this.apiClient.callApi('/core/virtual-machines/{vm_id}/logs', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Request virtual machine logs
     * Request console logs for a virtual machine
     * @param {Number} vmId 
     * @param {module:model/RequestInstanceLogsPayload} payload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RequestInstanceLogsResponse}
     */
  }, {
    key: "postInstanceLogs",
    value: function postInstanceLogs(vmId, payload) {
      return this.postInstanceLogsWithHttpInfo(vmId, payload).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Resize virtual machine
     * Updates the hardware configuration for an existing virtual machine. Include the virtual machine ID in the path and provide the new configuration, referred to as a `flavor`, in the body of the request. For additional information resizing, [**click here**](https://docs.hyperstack.cloud/docs/hardware/flavors#modify-the-flavor-of-an-existing-virtual-machine).
     * @param {Number} vmId 
     * @param {module:model/InstanceResizePayload} payload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResponseModel} and HTTP response
     */
  }, {
    key: "postInstanceResizeWithHttpInfo",
    value: function postInstanceResizeWithHttpInfo(vmId, payload) {
      var postBody = payload;
      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling postInstanceResize");
      }
      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postInstanceResize");
      }
      var pathParams = {
        'vm_id': vmId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ResponseModel["default"];
      return this.apiClient.callApi('/core/virtual-machines/{vm_id}/resize', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Resize virtual machine
     * Updates the hardware configuration for an existing virtual machine. Include the virtual machine ID in the path and provide the new configuration, referred to as a `flavor`, in the body of the request. For additional information resizing, [**click here**](https://docs.hyperstack.cloud/docs/hardware/flavors#modify-the-flavor-of-an-existing-virtual-machine).
     * @param {Number} vmId 
     * @param {module:model/InstanceResizePayload} payload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResponseModel}
     */
  }, {
    key: "postInstanceResize",
    value: function postInstanceResize(vmId, payload) {
      return this.postInstanceResizeWithHttpInfo(vmId, payload).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Add firewall rule to virtual machine
     * Creates a firewall rule for a virtual machine. Include the virtual machine ID in the path, and provide the firewall rule configuration in the request body, as detailed below. For additional information on firewall rules, [**click here**](https://docs.hyperstack.cloud/docs/api-reference/core-resources/virtual-machines/vm-firewall-rules/add-firewall-rule-to-vm).
     * @param {Number} vmId 
     * @param {module:model/CreateSecurityRulePayload} payload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SecurityGroupRule} and HTTP response
     */
  }, {
    key: "postSecurityRuleWithHttpInfo",
    value: function postSecurityRuleWithHttpInfo(vmId, payload) {
      var postBody = payload;
      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling postSecurityRule");
      }
      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postSecurityRule");
      }
      var pathParams = {
        'vm_id': vmId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _SecurityGroupRule["default"];
      return this.apiClient.callApi('/core/virtual-machines/{vm_id}/sg-rules', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Add firewall rule to virtual machine
     * Creates a firewall rule for a virtual machine. Include the virtual machine ID in the path, and provide the firewall rule configuration in the request body, as detailed below. For additional information on firewall rules, [**click here**](https://docs.hyperstack.cloud/docs/api-reference/core-resources/virtual-machines/vm-firewall-rules/add-firewall-rule-to-vm).
     * @param {Number} vmId 
     * @param {module:model/CreateSecurityRulePayload} payload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SecurityGroupRule}
     */
  }, {
    key: "postSecurityRule",
    value: function postSecurityRule(vmId, payload) {
      return this.postSecurityRuleWithHttpInfo(vmId, payload).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Create snapshot from a virtual machine
     * Create snapshots of a virtual machine by providing the virtual machine ID in the path
     * @param {Number} vmId 
     * @param {module:model/CreateSnapshotPayload} payload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateSnapshotResponse} and HTTP response
     */
  }, {
    key: "postSnapshotsWithHttpInfo",
    value: function postSnapshotsWithHttpInfo(vmId, payload) {
      var postBody = payload;
      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling postSnapshots");
      }
      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postSnapshots");
      }
      var pathParams = {
        'vm_id': vmId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateSnapshotResponse["default"];
      return this.apiClient.callApi('/core/virtual-machines/{vm_id}/snapshots', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Create snapshot from a virtual machine
     * Create snapshots of a virtual machine by providing the virtual machine ID in the path
     * @param {Number} vmId 
     * @param {module:model/CreateSnapshotPayload} payload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateSnapshotResponse}
     */
  }, {
    key: "postSnapshots",
    value: function postSnapshots(vmId, payload) {
      return this.postSnapshotsWithHttpInfo(vmId, payload).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Edit virtual machine labels
     * Adds one or more labels to an existing virtual machine. Provide the virtual machine ID in the path to add labels to the specified VM. For multiple labels, add a space between each label in the request body.
     * @param {Number} vmId 
     * @param {module:model/EditLabelOfAnExistingVMPayload} payload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResponseModel} and HTTP response
     */
  }, {
    key: "putLabelsWithHttpInfo",
    value: function putLabelsWithHttpInfo(vmId, payload) {
      var postBody = payload;
      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling putLabels");
      }
      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling putLabels");
      }
      var pathParams = {
        'vm_id': vmId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ResponseModel["default"];
      return this.apiClient.callApi('/core/virtual-machines/{vm_id}/label', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Edit virtual machine labels
     * Adds one or more labels to an existing virtual machine. Provide the virtual machine ID in the path to add labels to the specified VM. For multiple labels, add a space between each label in the request body.
     * @param {Number} vmId 
     * @param {module:model/EditLabelOfAnExistingVMPayload} payload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResponseModel}
     */
  }, {
    key: "putLabels",
    value: function putLabels(vmId, payload) {
      return this.putLabelsWithHttpInfo(vmId, payload).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Retrieve virtual machine details
     * Retrieves the details of an existing virtual machine. Provide the virtual machine ID in the path, and Infrahub will return information about the corresponding VM.
     * @param {Number} vmId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Instance} and HTTP response
     */
  }, {
    key: "retrieveVirtualMachineDetailsWithHttpInfo",
    value: function retrieveVirtualMachineDetailsWithHttpInfo(vmId) {
      var postBody = null;
      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling retrieveVirtualMachineDetails");
      }
      var pathParams = {
        'vm_id': vmId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _Instance["default"];
      return this.apiClient.callApi('/core/virtual-machines/{vm_id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Retrieve virtual machine details
     * Retrieves the details of an existing virtual machine. Provide the virtual machine ID in the path, and Infrahub will return information about the corresponding VM.
     * @param {Number} vmId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Instance}
     */
  }, {
    key: "retrieveVirtualMachineDetails",
    value: function retrieveVirtualMachineDetails(vmId) {
      return this.retrieveVirtualMachineDetailsWithHttpInfo(vmId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Retrieve virtual machines associated with a contract
     * Retrieves a list of virtual machines associated with a contract, providing details such as virtual machine name, timestamp, flavor name, and other relevant information. Please provide the ID of the relevant contract in the path.
     * @param {Number} contractId 
     * @param {Object} opts Optional parameters
     * @param {String} [page] Page Number
     * @param {String} [pageSize] Data Per Page
     * @param {String} [search] Search By Instance ID or Name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ContractInstancesResponse} and HTTP response
     */
  }, {
    key: "retrieveVirtualMachinesAssociatedWithAContractWithHttpInfo",
    value: function retrieveVirtualMachinesAssociatedWithAContractWithHttpInfo(contractId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'contractId' is set
      if (contractId === undefined || contractId === null) {
        throw new Error("Missing the required parameter 'contractId' when calling retrieveVirtualMachinesAssociatedWithAContract");
      }
      var pathParams = {
        'contract_id': contractId
      };
      var queryParams = {
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'search': opts['search']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ContractInstancesResponse["default"];
      return this.apiClient.callApi('/core/virtual-machines/contract/{contract_id}/virtual-machines', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Retrieve virtual machines associated with a contract
     * Retrieves a list of virtual machines associated with a contract, providing details such as virtual machine name, timestamp, flavor name, and other relevant information. Please provide the ID of the relevant contract in the path.
     * @param {Number} contractId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.page Page Number
     * @param {String} opts.pageSize Data Per Page
     * @param {String} opts.search Search By Instance ID or Name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ContractInstancesResponse}
     */
  }, {
    key: "retrieveVirtualMachinesAssociatedWithAContract",
    value: function retrieveVirtualMachinesAssociatedWithAContract(contractId, opts) {
      return this.retrieveVirtualMachinesAssociatedWithAContractWithHttpInfo(contractId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
}();