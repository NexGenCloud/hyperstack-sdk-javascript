"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _Billingmetricesresponse = _interopRequireDefault(require("../model/Billingmetricesresponse"));
var _ErrorResponseModel = _interopRequireDefault(require("../model/ErrorResponseModel"));
var _Lastdaycostresponse = _interopRequireDefault(require("../model/Lastdaycostresponse"));
var _OrganizationLevelBillingHistoryResponseModel = _interopRequireDefault(require("../model/OrganizationLevelBillingHistoryResponseModel"));
var _Organizationthresholdsresponse = _interopRequireDefault(require("../model/Organizationthresholdsresponse"));
var _Organizationthresholdupdateresponse = _interopRequireDefault(require("../model/Organizationthresholdupdateresponse"));
var _ResourceBillingEventsHistoryResponse = _interopRequireDefault(require("../model/ResourceBillingEventsHistoryResponse"));
var _ResourceLevelVMBillingDetailsResponseModel = _interopRequireDefault(require("../model/ResourceLevelVMBillingDetailsResponseModel"));
var _ResourceLevelVmBillingHistoryResponseModel = _interopRequireDefault(require("../model/ResourceLevelVmBillingHistoryResponseModel"));
var _ResourceLevelVmGraphBillingDetailsResponseModel = _interopRequireDefault(require("../model/ResourceLevelVmGraphBillingDetailsResponseModel"));
var _ResourceLevelVolumeBillingDetailsResponseModel = _interopRequireDefault(require("../model/ResourceLevelVolumeBillingDetailsResponseModel"));
var _ResourceLevelVolumeBillingHistoryResponseModel = _interopRequireDefault(require("../model/ResourceLevelVolumeBillingHistoryResponseModel"));
var _ResourceLevelVolumeGraphBillingDetailsResponseModel = _interopRequireDefault(require("../model/ResourceLevelVolumeGraphBillingDetailsResponseModel"));
var _SubResourcesCostsResponseModel = _interopRequireDefault(require("../model/SubResourcesCostsResponseModel"));
var _SubResourcesGraphResponseModel = _interopRequireDefault(require("../model/SubResourcesGraphResponseModel"));
var _Subscribeorunsubscribeupdatepayload = _interopRequireDefault(require("../model/Subscribeorunsubscribeupdatepayload"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Infrahub-API
 * Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
* Billing service.
* @module api/BillingApi
* @version v1.25.0-alpha
*/
var BillingApi = exports["default"] = /*#__PURE__*/function () {
  /**
  * Constructs a new BillingApi. 
  * @alias module:api/BillingApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function BillingApi(apiClient) {
    _classCallCheck(this, BillingApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
   * GET: All Thresholds for Organization
   * Retrieve all the notification thresholds for an organization.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Organizationthresholdsresponse} and HTTP response
   */
  return _createClass(BillingApi, [{
    key: "getAllThresholdsForOrganizationWithHttpInfo",
    value: function getAllThresholdsForOrganizationWithHttpInfo() {
      var postBody = null;
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey', 'accessToken'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _Organizationthresholdsresponse["default"];
      return this.apiClient.callApi('/billing/billing/threshold', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * GET: All Thresholds for Organization
     * Retrieve all the notification thresholds for an organization.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Organizationthresholdsresponse}
     */
  }, {
    key: "getAllThresholdsForOrganization",
    value: function getAllThresholdsForOrganization() {
      return this.getAllThresholdsForOrganizationWithHttpInfo().then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * GET: Billing usage
     * Retrieve active billing metrics for the organization's resources, including pricing, uptime, and total cost. Returns usage details for each active resource by defualt(`deleted=false` will return active resources). Additionally, adding `deleted=true` in query parameter will return inactive resources. For additional information on view usage costs for all resources, [**click here**](https://infrahub-doc.nexgencloud.com/docs/billing-and-payment/billing-features#view-usage-costs-for-all-resources)
     * @param {Object} opts Optional parameters
     * @param {String} [deleted] `true` will return inactive resources and `false` will return active resources. By defualt(`deleted=false`)
     * @param {String} [environment] Filter resources by environment ID or Name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Billingmetricesresponse} and HTTP response
     */
  }, {
    key: "getBillingUsageWithHttpInfo",
    value: function getBillingUsageWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        'deleted': opts['deleted'],
        'environment': opts['environment']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey', 'accessToken'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _Billingmetricesresponse["default"];
      return this.apiClient.callApi('/billing/billing/usage', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * GET: Billing usage
     * Retrieve active billing metrics for the organization's resources, including pricing, uptime, and total cost. Returns usage details for each active resource by defualt(`deleted=false` will return active resources). Additionally, adding `deleted=true` in query parameter will return inactive resources. For additional information on view usage costs for all resources, [**click here**](https://infrahub-doc.nexgencloud.com/docs/billing-and-payment/billing-features#view-usage-costs-for-all-resources)
     * @param {Object} opts Optional parameters
     * @param {String} opts.deleted `true` will return inactive resources and `false` will return active resources. By defualt(`deleted=false`)
     * @param {String} opts.environment Filter resources by environment ID or Name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Billingmetricesresponse}
     */
  }, {
    key: "getBillingUsage",
    value: function getBillingUsage(opts) {
      return this.getBillingUsageWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * GET: Last Day Cost
     * Retrieve the previous day's costs for instances, volumes, and clusters. Returns a breakdown of the costs and the total cost for the last day. For additional information on Retrieve Previous Day Usage Costs, [**click here**](https://infrahub-doc.nexgencloud.com/docs/api-reference/billing-resources/last-day-usage/)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Lastdaycostresponse} and HTTP response
     */
  }, {
    key: "getLastDayCostWithHttpInfo",
    value: function getLastDayCostWithHttpInfo() {
      var postBody = null;
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey', 'accessToken'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _Lastdaycostresponse["default"];
      return this.apiClient.callApi('/billing/billing/last-day-cost', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * GET: Last Day Cost
     * Retrieve the previous day's costs for instances, volumes, and clusters. Returns a breakdown of the costs and the total cost for the last day. For additional information on Retrieve Previous Day Usage Costs, [**click here**](https://infrahub-doc.nexgencloud.com/docs/api-reference/billing-resources/last-day-usage/)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Lastdaycostresponse}
     */
  }, {
    key: "getLastDayCost",
    value: function getLastDayCost() {
      return this.getLastDayCostWithHttpInfo().then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Retrieve Billing History for a specific Billing Cycle
     * User will recieve billing history for the specified billing cycle. This data will include 'incurred_bill', 'non_discounted_bill', 'vm_cost', 'volume_cost'
     * @param {Object} opts Optional parameters
     * @param {String} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} [graph] Set this value to \"true\" for getting graph value
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/OrganizationLevelBillingHistoryResponseModel} and HTTP response
     */
  }, {
    key: "retrieveBillingHistoryForASpecificBillingCycleWithHttpInfo",
    value: function retrieveBillingHistoryForASpecificBillingCycleWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'graph': opts['graph']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey', 'accessToken'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _OrganizationLevelBillingHistoryResponseModel["default"];
      return this.apiClient.callApi('/billing/billing/history', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Retrieve Billing History for a specific Billing Cycle
     * User will recieve billing history for the specified billing cycle. This data will include 'incurred_bill', 'non_discounted_bill', 'vm_cost', 'volume_cost'
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} opts.endDate Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} opts.graph Set this value to \"true\" for getting graph value
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/OrganizationLevelBillingHistoryResponseModel}
     */
  }, {
    key: "retrieveBillingHistoryForASpecificBillingCycle",
    value: function retrieveBillingHistoryForASpecificBillingCycle(opts) {
      return this.retrieveBillingHistoryForASpecificBillingCycleWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Retrieve Billing History of a Specific Snapshot for a specific Billing Cycle
     * Retrieve billing history of a specific Snapshot for the specified billing cycle. This data will include 'resource_name', 'infrahub_id', 'price_per_hour', 'incurred_bill', 'usage_time', 'non_discounted_price_per_hour', 'non_discounted_bill'.
     * @param {Number} snapshotId 
     * @param {Object} opts Optional parameters
     * @param {String} [startDate] Datetime should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} [endDate] Datetime should be formatted in YYYY-MM-DDTHH:MM:SS
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResourceLevelVolumeBillingDetailsResponseModel} and HTTP response
     */
  }, {
    key: "retrieveBillingHistoryOfASpecificSnapshotForASpecificBillingCycleWithHttpInfo",
    value: function retrieveBillingHistoryOfASpecificSnapshotForASpecificBillingCycleWithHttpInfo(snapshotId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'snapshotId' is set
      if (snapshotId === undefined || snapshotId === null) {
        throw new Error("Missing the required parameter 'snapshotId' when calling retrieveBillingHistoryOfASpecificSnapshotForASpecificBillingCycle");
      }
      var pathParams = {
        'snapshot_id': snapshotId
      };
      var queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey', 'accessToken'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ResourceLevelVolumeBillingDetailsResponseModel["default"];
      return this.apiClient.callApi('/billing/billing/history/snapshot/{snapshot_id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Retrieve Billing History of a Specific Snapshot for a specific Billing Cycle
     * Retrieve billing history of a specific Snapshot for the specified billing cycle. This data will include 'resource_name', 'infrahub_id', 'price_per_hour', 'incurred_bill', 'usage_time', 'non_discounted_price_per_hour', 'non_discounted_bill'.
     * @param {Number} snapshotId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Datetime should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} opts.endDate Datetime should be formatted in YYYY-MM-DDTHH:MM:SS
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResourceLevelVolumeBillingDetailsResponseModel}
     */
  }, {
    key: "retrieveBillingHistoryOfASpecificSnapshotForASpecificBillingCycle",
    value: function retrieveBillingHistoryOfASpecificSnapshotForASpecificBillingCycle(snapshotId, opts) {
      return this.retrieveBillingHistoryOfASpecificSnapshotForASpecificBillingCycleWithHttpInfo(snapshotId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Retrieve Billing History of a Specific Virtual Machine for a specific Billing Cycle
     * User will recieve billing history of a specific Virtual Machine for the specified billing cycle. This data will include 'resource_name', 'infrahub_id', 'price_per_hour', 'non_discounted_price_per_hour', 'incurred_bill', 'non_discounted_bill', 'usage_time', 'usage_time_ACTIVE', 'usage_time_SHUTOFF', 'usage_time_HIBERNATED'
     * @param {Number} vmId 
     * @param {Object} opts Optional parameters
     * @param {String} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResourceLevelVMBillingDetailsResponseModel} and HTTP response
     */
  }, {
    key: "retrieveBillingHistoryOfASpecificVirtualMachineForASpecificBillingCycleWithHttpInfo",
    value: function retrieveBillingHistoryOfASpecificVirtualMachineForASpecificBillingCycleWithHttpInfo(vmId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling retrieveBillingHistoryOfASpecificVirtualMachineForASpecificBillingCycle");
      }
      var pathParams = {
        'vm_id': vmId
      };
      var queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey', 'accessToken'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ResourceLevelVMBillingDetailsResponseModel["default"];
      return this.apiClient.callApi('/billing/billing/history/virtual-machine/{vm_id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Retrieve Billing History of a Specific Virtual Machine for a specific Billing Cycle
     * User will recieve billing history of a specific Virtual Machine for the specified billing cycle. This data will include 'resource_name', 'infrahub_id', 'price_per_hour', 'non_discounted_price_per_hour', 'incurred_bill', 'non_discounted_bill', 'usage_time', 'usage_time_ACTIVE', 'usage_time_SHUTOFF', 'usage_time_HIBERNATED'
     * @param {Number} vmId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} opts.endDate Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResourceLevelVMBillingDetailsResponseModel}
     */
  }, {
    key: "retrieveBillingHistoryOfASpecificVirtualMachineForASpecificBillingCycle",
    value: function retrieveBillingHistoryOfASpecificVirtualMachineForASpecificBillingCycle(vmId, opts) {
      return this.retrieveBillingHistoryOfASpecificVirtualMachineForASpecificBillingCycleWithHttpInfo(vmId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Retrieve Billing History of a Specific Volume for a specific Billing Cycle
     * Retrieve billing history of a specific Volume for the specified billing cycle. This data will include 'resource_name', 'infrahub_id', 'price_per_hour', 'incurred_bill', 'usage_time', 'non_discounted_price_per_hour', 'non_discounted_bill'.
     * @param {Number} volumeId 
     * @param {Object} opts Optional parameters
     * @param {String} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResourceLevelVolumeBillingDetailsResponseModel} and HTTP response
     */
  }, {
    key: "retrieveBillingHistoryOfASpecificVolumeForASpecificBillingCycleWithHttpInfo",
    value: function retrieveBillingHistoryOfASpecificVolumeForASpecificBillingCycleWithHttpInfo(volumeId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'volumeId' is set
      if (volumeId === undefined || volumeId === null) {
        throw new Error("Missing the required parameter 'volumeId' when calling retrieveBillingHistoryOfASpecificVolumeForASpecificBillingCycle");
      }
      var pathParams = {
        'volume_id': volumeId
      };
      var queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey', 'accessToken'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ResourceLevelVolumeBillingDetailsResponseModel["default"];
      return this.apiClient.callApi('/billing/billing/history/volume/{volume_id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Retrieve Billing History of a Specific Volume for a specific Billing Cycle
     * Retrieve billing history of a specific Volume for the specified billing cycle. This data will include 'resource_name', 'infrahub_id', 'price_per_hour', 'incurred_bill', 'usage_time', 'non_discounted_price_per_hour', 'non_discounted_bill'.
     * @param {Number} volumeId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} opts.endDate Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResourceLevelVolumeBillingDetailsResponseModel}
     */
  }, {
    key: "retrieveBillingHistoryOfASpecificVolumeForASpecificBillingCycle",
    value: function retrieveBillingHistoryOfASpecificVolumeForASpecificBillingCycle(volumeId, opts) {
      return this.retrieveBillingHistoryOfASpecificVolumeForASpecificBillingCycleWithHttpInfo(volumeId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Retrieve Billing History of Contract for a specific Billing Cycle
     * User will recieve billing history of contracts for the specified billing cycle. This data will include 'description', gpu_type','infrahub_id', 'status', 'incurred_bill', 'price_per_hour'
     * @param {Object} opts Optional parameters
     * @param {String} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} [search] Search by Contract \"Description\" or \"ID\"
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
  }, {
    key: "retrieveBillingHistoryOfContractForASpecificBillingCycleWithHttpInfo",
    value: function retrieveBillingHistoryOfContractForASpecificBillingCycleWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'search': opts['search']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey', 'accessToken'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;
      return this.apiClient.callApi('/billing/billing/history/contract', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Retrieve Billing History of Contract for a specific Billing Cycle
     * User will recieve billing history of contracts for the specified billing cycle. This data will include 'description', gpu_type','infrahub_id', 'status', 'incurred_bill', 'price_per_hour'
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} opts.endDate Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} opts.search Search by Contract \"Description\" or \"ID\"
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
  }, {
    key: "retrieveBillingHistoryOfContractForASpecificBillingCycle",
    value: function retrieveBillingHistoryOfContractForASpecificBillingCycle(opts) {
      return this.retrieveBillingHistoryOfContractForASpecificBillingCycleWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Retrieve Billing History of Snapshot for a specific Billing Cycle
     * User will recieve billing history of snapshots for thespecified billing cycle. This data will include 'resource_name', 'infrahub_id', 'status', 'incurred_bill', 'usage_time', 'price_per_hour'
     * @param {Object} opts Optional parameters
     * @param {String} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} [search] Search by Volume \"Name\" or \"ID\"
     * @param {String} [page] Page number
     * @param {String} [perPage] Number of items to return per page
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResourceLevelVolumeBillingHistoryResponseModel} and HTTP response
     */
  }, {
    key: "retrieveBillingHistoryOfSnapshotForASpecificBillingCycleWithHttpInfo",
    value: function retrieveBillingHistoryOfSnapshotForASpecificBillingCycleWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'search': opts['search'],
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey', 'accessToken'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ResourceLevelVolumeBillingHistoryResponseModel["default"];
      return this.apiClient.callApi('/billing/billing/history/snapshot', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Retrieve Billing History of Snapshot for a specific Billing Cycle
     * User will recieve billing history of snapshots for thespecified billing cycle. This data will include 'resource_name', 'infrahub_id', 'status', 'incurred_bill', 'usage_time', 'price_per_hour'
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} opts.endDate Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} opts.search Search by Volume \"Name\" or \"ID\"
     * @param {String} opts.page Page number
     * @param {String} opts.perPage Number of items to return per page
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResourceLevelVolumeBillingHistoryResponseModel}
     */
  }, {
    key: "retrieveBillingHistoryOfSnapshotForASpecificBillingCycle",
    value: function retrieveBillingHistoryOfSnapshotForASpecificBillingCycle(opts) {
      return this.retrieveBillingHistoryOfSnapshotForASpecificBillingCycleWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Retrieve Billing History of Virtual Machine for a specific Billing Cycle
     * User will recieve billing history of virtual machine for the specified billing cycle. This data will include 'resource_name', 'infrahub_id', 'status', 'incurred_bill', 'usage_time', 'price_per_hour'
     * @param {Object} opts Optional parameters
     * @param {String} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} [search] Search by Virtual Machine \"Name\" or \"ID\"
     * @param {String} [perPage] Number of items to return per page
     * @param {String} [page] Page number
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResourceLevelVmBillingHistoryResponseModel} and HTTP response
     */
  }, {
    key: "retrieveBillingHistoryOfVirtualMachineForASpecificBillingCycleWithHttpInfo",
    value: function retrieveBillingHistoryOfVirtualMachineForASpecificBillingCycleWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'search': opts['search'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey', 'accessToken'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ResourceLevelVmBillingHistoryResponseModel["default"];
      return this.apiClient.callApi('/billing/billing/history/virtual-machine', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Retrieve Billing History of Virtual Machine for a specific Billing Cycle
     * User will recieve billing history of virtual machine for the specified billing cycle. This data will include 'resource_name', 'infrahub_id', 'status', 'incurred_bill', 'usage_time', 'price_per_hour'
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} opts.endDate Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} opts.search Search by Virtual Machine \"Name\" or \"ID\"
     * @param {String} opts.perPage Number of items to return per page
     * @param {String} opts.page Page number
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResourceLevelVmBillingHistoryResponseModel}
     */
  }, {
    key: "retrieveBillingHistoryOfVirtualMachineForASpecificBillingCycle",
    value: function retrieveBillingHistoryOfVirtualMachineForASpecificBillingCycle(opts) {
      return this.retrieveBillingHistoryOfVirtualMachineForASpecificBillingCycleWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Retrieve Billing History of Volume for a specific Billing Cycle
     * User will recieve billing history of volumes for thespecified billing cycle. This data will include 'resource_name', 'infrahub_id', 'status', 'incurred_bill', 'usage_time', 'price_per_hour'
     * @param {Object} opts Optional parameters
     * @param {String} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} [search] Search by Volume \"Name\" or \"ID\"
     * @param {String} [perPage] Number of items to return per page
     * @param {String} [page] Page number
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResourceLevelVolumeBillingHistoryResponseModel} and HTTP response
     */
  }, {
    key: "retrieveBillingHistoryOfVolumeForASpecificBillingCycleWithHttpInfo",
    value: function retrieveBillingHistoryOfVolumeForASpecificBillingCycleWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'search': opts['search'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey', 'accessToken'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ResourceLevelVolumeBillingHistoryResponseModel["default"];
      return this.apiClient.callApi('/billing/billing/history/volume', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Retrieve Billing History of Volume for a specific Billing Cycle
     * User will recieve billing history of volumes for thespecified billing cycle. This data will include 'resource_name', 'infrahub_id', 'status', 'incurred_bill', 'usage_time', 'price_per_hour'
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} opts.endDate Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} opts.search Search by Volume \"Name\" or \"ID\"
     * @param {String} opts.perPage Number of items to return per page
     * @param {String} opts.page Page number
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResourceLevelVolumeBillingHistoryResponseModel}
     */
  }, {
    key: "retrieveBillingHistoryOfVolumeForASpecificBillingCycle",
    value: function retrieveBillingHistoryOfVolumeForASpecificBillingCycle(opts) {
      return this.retrieveBillingHistoryOfVolumeForASpecificBillingCycleWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Retrieve hourly cost datapoints of a Specific Snapshot for a specific billing cycle
     * User will recieve hourly cost datapoints for a Snapshot for a specified billing cycle. This data will include 'incurred_bill' graph datapoints.
     * @param {Number} snapshotId 
     * @param {Object} opts Optional parameters
     * @param {String} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResourceLevelVolumeGraphBillingDetailsResponseModel} and HTTP response
     */
  }, {
    key: "retrieveHourlyCostDatapointsOfASpecificSnapshotForASpecificBillingCycleWithHttpInfo",
    value: function retrieveHourlyCostDatapointsOfASpecificSnapshotForASpecificBillingCycleWithHttpInfo(snapshotId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'snapshotId' is set
      if (snapshotId === undefined || snapshotId === null) {
        throw new Error("Missing the required parameter 'snapshotId' when calling retrieveHourlyCostDatapointsOfASpecificSnapshotForASpecificBillingCycle");
      }
      var pathParams = {
        'snapshot_id': snapshotId
      };
      var queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey', 'accessToken'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ResourceLevelVolumeGraphBillingDetailsResponseModel["default"];
      return this.apiClient.callApi('/billing/billing/history/snapshot/{snapshot_id}/graph', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Retrieve hourly cost datapoints of a Specific Snapshot for a specific billing cycle
     * User will recieve hourly cost datapoints for a Snapshot for a specified billing cycle. This data will include 'incurred_bill' graph datapoints.
     * @param {Number} snapshotId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} opts.endDate Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResourceLevelVolumeGraphBillingDetailsResponseModel}
     */
  }, {
    key: "retrieveHourlyCostDatapointsOfASpecificSnapshotForASpecificBillingCycle",
    value: function retrieveHourlyCostDatapointsOfASpecificSnapshotForASpecificBillingCycle(snapshotId, opts) {
      return this.retrieveHourlyCostDatapointsOfASpecificSnapshotForASpecificBillingCycleWithHttpInfo(snapshotId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Retrieve hourly cost datapoints of a Specific Virtual Machine for a specific billing cycle
     * User will recieve hourly cost datapoints for a VM for a specified billing cycle. This data will include 'incurred_bill' graph datapoints.
     * @param {Number} vmId 
     * @param {Object} opts Optional parameters
     * @param {String} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResourceLevelVmGraphBillingDetailsResponseModel} and HTTP response
     */
  }, {
    key: "retrieveHourlyCostDatapointsOfASpecificVirtualMachineForASpecificBillingCycleWithHttpInfo",
    value: function retrieveHourlyCostDatapointsOfASpecificVirtualMachineForASpecificBillingCycleWithHttpInfo(vmId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling retrieveHourlyCostDatapointsOfASpecificVirtualMachineForASpecificBillingCycle");
      }
      var pathParams = {
        'vm_id': vmId
      };
      var queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey', 'accessToken'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ResourceLevelVmGraphBillingDetailsResponseModel["default"];
      return this.apiClient.callApi('/billing/billing/history/virtual-machine/{vm_id}/graph', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Retrieve hourly cost datapoints of a Specific Virtual Machine for a specific billing cycle
     * User will recieve hourly cost datapoints for a VM for a specified billing cycle. This data will include 'incurred_bill' graph datapoints.
     * @param {Number} vmId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} opts.endDate Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResourceLevelVmGraphBillingDetailsResponseModel}
     */
  }, {
    key: "retrieveHourlyCostDatapointsOfASpecificVirtualMachineForASpecificBillingCycle",
    value: function retrieveHourlyCostDatapointsOfASpecificVirtualMachineForASpecificBillingCycle(vmId, opts) {
      return this.retrieveHourlyCostDatapointsOfASpecificVirtualMachineForASpecificBillingCycleWithHttpInfo(vmId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Retrieve hourly cost datapoints of a Specific Volume for a specific billing cycle
     * User will recieve hourly cost datapoints for a Volume for a specified billing cycle. This data will include 'incurred_bill' graph datapoints.
     * @param {Number} volumeId 
     * @param {Object} opts Optional parameters
     * @param {String} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResourceLevelVolumeGraphBillingDetailsResponseModel} and HTTP response
     */
  }, {
    key: "retrieveHourlyCostDatapointsOfASpecificVolumeForASpecificBillingCycleWithHttpInfo",
    value: function retrieveHourlyCostDatapointsOfASpecificVolumeForASpecificBillingCycleWithHttpInfo(volumeId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'volumeId' is set
      if (volumeId === undefined || volumeId === null) {
        throw new Error("Missing the required parameter 'volumeId' when calling retrieveHourlyCostDatapointsOfASpecificVolumeForASpecificBillingCycle");
      }
      var pathParams = {
        'volume_id': volumeId
      };
      var queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey', 'accessToken'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ResourceLevelVolumeGraphBillingDetailsResponseModel["default"];
      return this.apiClient.callApi('/billing/billing/history/volume/{volume_id}/graph', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Retrieve hourly cost datapoints of a Specific Volume for a specific billing cycle
     * User will recieve hourly cost datapoints for a Volume for a specified billing cycle. This data will include 'incurred_bill' graph datapoints.
     * @param {Number} volumeId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} opts.endDate Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResourceLevelVolumeGraphBillingDetailsResponseModel}
     */
  }, {
    key: "retrieveHourlyCostDatapointsOfASpecificVolumeForASpecificBillingCycle",
    value: function retrieveHourlyCostDatapointsOfASpecificVolumeForASpecificBillingCycle(volumeId, opts) {
      return this.retrieveHourlyCostDatapointsOfASpecificVolumeForASpecificBillingCycleWithHttpInfo(volumeId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Retrieve Sub-Resources Historical Cost datapoints of a Virtual
     * User will recieve sub-resources historical cost datapoints for a VM sub resources for a specified billing cycle. This data will include 'incurred_bill' graph datapoints. Machine sub resources for a specific billing cycle
     * @param {Number} vmId 
     * @param {Object} opts Optional parameters
     * @param {String} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SubResourcesGraphResponseModel} and HTTP response
     */
  }, {
    key: "retrieveSubResourcesHistoricalCostDatapointsOfAVirtualWithHttpInfo",
    value: function retrieveSubResourcesHistoricalCostDatapointsOfAVirtualWithHttpInfo(vmId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling retrieveSubResourcesHistoricalCostDatapointsOfAVirtual");
      }
      var pathParams = {
        'vm_id': vmId
      };
      var queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey', 'accessToken'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _SubResourcesGraphResponseModel["default"];
      return this.apiClient.callApi('/billing/billing/virtual-machine/{vm_id}/sub-resource/graph', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Retrieve Sub-Resources Historical Cost datapoints of a Virtual
     * User will recieve sub-resources historical cost datapoints for a VM sub resources for a specified billing cycle. This data will include 'incurred_bill' graph datapoints. Machine sub resources for a specific billing cycle
     * @param {Number} vmId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} opts.endDate Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SubResourcesGraphResponseModel}
     */
  }, {
    key: "retrieveSubResourcesHistoricalCostDatapointsOfAVirtual",
    value: function retrieveSubResourcesHistoricalCostDatapointsOfAVirtual(vmId, opts) {
      return this.retrieveSubResourcesHistoricalCostDatapointsOfAVirtualWithHttpInfo(vmId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Retrieve Total Costs and Non Discount Costs for Sub Resources
     * User will get total costs and non_discount costs of sub resources on a specific Virtual Machine for the specified billing cycle. on a Specific VM for the Specified Billing Cycle
     * @param {Number} vmId 
     * @param {Object} opts Optional parameters
     * @param {String} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SubResourcesCostsResponseModel} and HTTP response
     */
  }, {
    key: "retrieveTotalCostsAndNonDiscountCostsForSubResourcesWithHttpInfo",
    value: function retrieveTotalCostsAndNonDiscountCostsForSubResourcesWithHttpInfo(vmId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling retrieveTotalCostsAndNonDiscountCostsForSubResources");
      }
      var pathParams = {
        'vm_id': vmId
      };
      var queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey', 'accessToken'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _SubResourcesCostsResponseModel["default"];
      return this.apiClient.callApi('/billing/billing/virtual-machine/{vm_id}/sub-resource', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Retrieve Total Costs and Non Discount Costs for Sub Resources
     * User will get total costs and non_discount costs of sub resources on a specific Virtual Machine for the specified billing cycle. on a Specific VM for the Specified Billing Cycle
     * @param {Number} vmId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} opts.endDate Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SubResourcesCostsResponseModel}
     */
  }, {
    key: "retrieveTotalCostsAndNonDiscountCostsForSubResources",
    value: function retrieveTotalCostsAndNonDiscountCostsForSubResources(vmId, opts) {
      return this.retrieveTotalCostsAndNonDiscountCostsForSubResourcesWithHttpInfo(vmId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Retrieve VM billing events history
     * User will receive vm billing events history
     * @param {Number} vmId 
     * @param {Object} opts Optional parameters
     * @param {String} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResourceBillingEventsHistoryResponse} and HTTP response
     */
  }, {
    key: "retrieveVmBillingEventsHistoryWithHttpInfo",
    value: function retrieveVmBillingEventsHistoryWithHttpInfo(vmId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling retrieveVmBillingEventsHistory");
      }
      var pathParams = {
        'vm_id': vmId
      };
      var queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey', 'accessToken'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ResourceBillingEventsHistoryResponse["default"];
      return this.apiClient.callApi('/billing/billing/virtual-machine/{vm_id}/billing-events', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Retrieve VM billing events history
     * User will receive vm billing events history
     * @param {Number} vmId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} opts.endDate Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResourceBillingEventsHistoryResponse}
     */
  }, {
    key: "retrieveVmBillingEventsHistory",
    value: function retrieveVmBillingEventsHistory(vmId, opts) {
      return this.retrieveVmBillingEventsHistoryWithHttpInfo(vmId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Retrieve Volume billing events history
     * User will receive volume billing events history
     * @param {Number} volumeId 
     * @param {Object} opts Optional parameters
     * @param {String} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResourceBillingEventsHistoryResponse} and HTTP response
     */
  }, {
    key: "retrieveVolumeBillingEventsHistoryWithHttpInfo",
    value: function retrieveVolumeBillingEventsHistoryWithHttpInfo(volumeId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'volumeId' is set
      if (volumeId === undefined || volumeId === null) {
        throw new Error("Missing the required parameter 'volumeId' when calling retrieveVolumeBillingEventsHistory");
      }
      var pathParams = {
        'volume_id': volumeId
      };
      var queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey', 'accessToken'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ResourceBillingEventsHistoryResponse["default"];
      return this.apiClient.callApi('/billing/billing/volume/{volume_id}/billing-events', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Retrieve Volume billing events history
     * User will receive volume billing events history
     * @param {Number} volumeId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {String} opts.endDate Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResourceBillingEventsHistoryResponse}
     */
  }, {
    key: "retrieveVolumeBillingEventsHistory",
    value: function retrieveVolumeBillingEventsHistory(volumeId, opts) {
      return this.retrieveVolumeBillingEventsHistoryWithHttpInfo(volumeId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Update: Subscribe or Unsubscribe Notification Threshold
     * By default, you are subscribed to all the threshold values and you will be receiving the email notification for these default thresholds values. `false` indicates that the user will no longer receive notifications for this specific threshold, whereas `true` signifies that the user will receive notification emails.
     * @param {Number} thresholdId 
     * @param {module:model/Subscribeorunsubscribeupdatepayload} payload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Organizationthresholdupdateresponse} and HTTP response
     */
  }, {
    key: "updateSubscribeOrUnsubscribeNotificationThresholdWithHttpInfo",
    value: function updateSubscribeOrUnsubscribeNotificationThresholdWithHttpInfo(thresholdId, payload) {
      var postBody = payload;
      // verify the required parameter 'thresholdId' is set
      if (thresholdId === undefined || thresholdId === null) {
        throw new Error("Missing the required parameter 'thresholdId' when calling updateSubscribeOrUnsubscribeNotificationThreshold");
      }
      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateSubscribeOrUnsubscribeNotificationThreshold");
      }
      var pathParams = {
        'threshold_id': thresholdId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey', 'accessToken'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _Organizationthresholdupdateresponse["default"];
      return this.apiClient.callApi('/billing/billing/threshold/{threshold_id}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Update: Subscribe or Unsubscribe Notification Threshold
     * By default, you are subscribed to all the threshold values and you will be receiving the email notification for these default thresholds values. `false` indicates that the user will no longer receive notifications for this specific threshold, whereas `true` signifies that the user will receive notification emails.
     * @param {Number} thresholdId 
     * @param {module:model/Subscribeorunsubscribeupdatepayload} payload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Organizationthresholdupdateresponse}
     */
  }, {
    key: "updateSubscribeOrUnsubscribeNotificationThreshold",
    value: function updateSubscribeOrUnsubscribeNotificationThreshold(thresholdId, payload) {
      return this.updateSubscribeOrUnsubscribeNotificationThresholdWithHttpInfo(thresholdId, payload).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
}();