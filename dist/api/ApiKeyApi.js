"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _CommonResponseModel = _interopRequireDefault(require("../model/CommonResponseModel"));
var _ErrorResponseModel = _interopRequireDefault(require("../model/ErrorResponseModel"));
var _GenerateUpdateApiKeyPayload = _interopRequireDefault(require("../model/GenerateUpdateApiKeyPayload"));
var _GenerateUpdateApiKeyResponseModel = _interopRequireDefault(require("../model/GenerateUpdateApiKeyResponseModel"));
var _GetApiKeysResponseModel = _interopRequireDefault(require("../model/GetApiKeysResponseModel"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Infrahub-API
 * Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
* ApiKey service.
* @module api/ApiKeyApi
* @version v1.42.1-alpha
*/
var ApiKeyApi = exports["default"] = /*#__PURE__*/function () {
  /**
  * Constructs a new ApiKeyApi. 
  * @alias module:api/ApiKeyApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function ApiKeyApi(apiClient) {
    _classCallCheck(this, ApiKeyApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
   * Delete API Key
   * Delete a specified API key by including the ID of the API key in the path.
   * @param {Number} apiKeyId 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CommonResponseModel} and HTTP response
   */
  return _createClass(ApiKeyApi, [{
    key: "deleteAPIKeyWithHttpInfo",
    value: function deleteAPIKeyWithHttpInfo(apiKeyId) {
      var postBody = null;
      // verify the required parameter 'apiKeyId' is set
      if (apiKeyId === undefined || apiKeyId === null) {
        throw new Error("Missing the required parameter 'apiKeyId' when calling deleteAPIKey");
      }
      var pathParams = {
        'api_key_id': apiKeyId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _CommonResponseModel["default"];
      return this.apiClient.callApi('/api-key/{api_key_id}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Delete API Key
     * Delete a specified API key by including the ID of the API key in the path.
     * @param {Number} apiKeyId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CommonResponseModel}
     */
  }, {
    key: "deleteAPIKey",
    value: function deleteAPIKey(apiKeyId) {
      return this.deleteAPIKeyWithHttpInfo(apiKeyId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Generate API Key
     * Generates your API key, providing access to the Infrahub APIs. For further details on API keys, [**click here**](https://docs.hyperstack.cloud/docs/api-reference/auth-resources/api-key/generate-api-key).
     * @param {module:model/GenerateUpdateApiKeyPayload} payload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GenerateUpdateApiKeyResponseModel} and HTTP response
     */
  }, {
    key: "generateAPIKeyWithHttpInfo",
    value: function generateAPIKeyWithHttpInfo(payload) {
      var postBody = payload;
      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling generateAPIKey");
      }
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GenerateUpdateApiKeyResponseModel["default"];
      return this.apiClient.callApi('/api-key/generate', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Generate API Key
     * Generates your API key, providing access to the Infrahub APIs. For further details on API keys, [**click here**](https://docs.hyperstack.cloud/docs/api-reference/auth-resources/api-key/generate-api-key).
     * @param {module:model/GenerateUpdateApiKeyPayload} payload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GenerateUpdateApiKeyResponseModel}
     */
  }, {
    key: "generateAPIKey",
    value: function generateAPIKey(payload) {
      return this.generateAPIKeyWithHttpInfo(payload).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Retrieve API Keys
     * Retrieves your API keys, granting access to the Infrahub APIs. For further details on API keys, [**click here**](https://docs.hyperstack.cloud/docs/api-reference/auth-resources/api-key/retrieve-api-key).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetApiKeysResponseModel} and HTTP response
     */
  }, {
    key: "retrieveAPIKeyWithHttpInfo",
    value: function retrieveAPIKeyWithHttpInfo() {
      var postBody = null;
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _GetApiKeysResponseModel["default"];
      return this.apiClient.callApi('/api-key', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Retrieve API Keys
     * Retrieves your API keys, granting access to the Infrahub APIs. For further details on API keys, [**click here**](https://docs.hyperstack.cloud/docs/api-reference/auth-resources/api-key/retrieve-api-key).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetApiKeysResponseModel}
     */
  }, {
    key: "retrieveAPIKey",
    value: function retrieveAPIKey() {
      return this.retrieveAPIKeyWithHttpInfo().then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Update API Key
     * Updates the name and optionally the description of a specified API key. Include the ID of the API key in the path and the new name and optional description in the body of the request.
     * @param {Number} apiKeyId 
     * @param {module:model/GenerateUpdateApiKeyPayload} payload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GenerateUpdateApiKeyResponseModel} and HTTP response
     */
  }, {
    key: "updateAPIKeyWithHttpInfo",
    value: function updateAPIKeyWithHttpInfo(apiKeyId, payload) {
      var postBody = payload;
      // verify the required parameter 'apiKeyId' is set
      if (apiKeyId === undefined || apiKeyId === null) {
        throw new Error("Missing the required parameter 'apiKeyId' when calling updateAPIKey");
      }
      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateAPIKey");
      }
      var pathParams = {
        'api_key_id': apiKeyId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GenerateUpdateApiKeyResponseModel["default"];
      return this.apiClient.callApi('/api-key/{api_key_id}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Update API Key
     * Updates the name and optionally the description of a specified API key. Include the ID of the API key in the path and the new name and optional description in the body of the request.
     * @param {Number} apiKeyId 
     * @param {module:model/GenerateUpdateApiKeyPayload} payload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GenerateUpdateApiKeyResponseModel}
     */
  }, {
    key: "updateAPIKey",
    value: function updateAPIKey(apiKeyId, payload) {
      return this.updateAPIKeyWithHttpInfo(apiKeyId, payload).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
}();