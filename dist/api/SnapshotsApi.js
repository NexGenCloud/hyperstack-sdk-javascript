"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _CreateImage = _interopRequireDefault(require("../model/CreateImage"));
var _CreateImagePayload = _interopRequireDefault(require("../model/CreateImagePayload"));
var _ErrorResponseModel = _interopRequireDefault(require("../model/ErrorResponseModel"));
var _Instance = _interopRequireDefault(require("../model/Instance"));
var _NameAvailableModel = _interopRequireDefault(require("../model/NameAvailableModel"));
var _ResponseModel = _interopRequireDefault(require("../model/ResponseModel"));
var _SnapshotRestoreRequest = _interopRequireDefault(require("../model/SnapshotRestoreRequest"));
var _SnapshotRetrieve = _interopRequireDefault(require("../model/SnapshotRetrieve"));
var _Snapshots = _interopRequireDefault(require("../model/Snapshots"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Infrahub-API
 * Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
* Snapshots service.
* @module api/SnapshotsApi
* @version v1.41.2-alpha
*/
var SnapshotsApi = exports["default"] = /*#__PURE__*/function () {
  /**
  * Constructs a new SnapshotsApi. 
  * @alias module:api/SnapshotsApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function SnapshotsApi(apiClient) {
    _classCallCheck(this, SnapshotsApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
   * Create an image from a snapshot
   * Create a new custom image from an existing snapshot.Requires a name and any labels for your new custom image.
   * @param {Number} snapshotId 
   * @param {module:model/CreateImagePayload} payload 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateImage} and HTTP response
   */
  return _createClass(SnapshotsApi, [{
    key: "createANewCustomImageWithHttpInfo",
    value: function createANewCustomImageWithHttpInfo(snapshotId, payload) {
      var postBody = payload;
      // verify the required parameter 'snapshotId' is set
      if (snapshotId === undefined || snapshotId === null) {
        throw new Error("Missing the required parameter 'snapshotId' when calling createANewCustomImage");
      }
      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling createANewCustomImage");
      }
      var pathParams = {
        'snapshot_id': snapshotId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateImage["default"];
      return this.apiClient.callApi('/core/snapshots/{snapshot_id}/image', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Create an image from a snapshot
     * Create a new custom image from an existing snapshot.Requires a name and any labels for your new custom image.
     * @param {Number} snapshotId 
     * @param {module:model/CreateImagePayload} payload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateImage}
     */
  }, {
    key: "createANewCustomImage",
    value: function createANewCustomImage(snapshotId, payload) {
      return this.createANewCustomImageWithHttpInfo(snapshotId, payload).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Delete snapshot
     * Delete a snapshot. Provide the snapshot ID in the path to delete the specified snapshot. If the snapshot is connected with an image, that image will also bedeleted and the deleted image ID will be returned in the success message response.
     * @param {Number} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResponseModel} and HTTP response
     */
  }, {
    key: "deleteSnapshotWithHttpInfo",
    value: function deleteSnapshotWithHttpInfo(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteSnapshot");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ResponseModel["default"];
      return this.apiClient.callApi('/core/snapshots/{id}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Delete snapshot
     * Delete a snapshot. Provide the snapshot ID in the path to delete the specified snapshot. If the snapshot is connected with an image, that image will also bedeleted and the deleted image ID will be returned in the success message response.
     * @param {Number} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResponseModel}
     */
  }, {
    key: "deleteSnapshot",
    value: function deleteSnapshot(id) {
      return this.deleteSnapshotWithHttpInfo(id).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Fetch snapshot name availability
     * Check if a Snapshot name is available
     * @param {String} name 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NameAvailableModel} and HTTP response
     */
  }, {
    key: "fetchSnapshotNameAvailabilityWithHttpInfo",
    value: function fetchSnapshotNameAvailabilityWithHttpInfo(name) {
      var postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling fetchSnapshotNameAvailability");
      }
      var pathParams = {
        'name': name
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _NameAvailableModel["default"];
      return this.apiClient.callApi('/core/snapshots/name-availability/{name}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Fetch snapshot name availability
     * Check if a Snapshot name is available
     * @param {String} name 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NameAvailableModel}
     */
  }, {
    key: "fetchSnapshotNameAvailability",
    value: function fetchSnapshotNameAvailability(name) {
      return this.fetchSnapshotNameAvailabilityWithHttpInfo(name).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Retrieve a snapshot
     * Retrieve a snapshot.
     * @param {Number} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SnapshotRetrieve} and HTTP response
     */
  }, {
    key: "getSnapshotWithHttpInfo",
    value: function getSnapshotWithHttpInfo(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSnapshot");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _SnapshotRetrieve["default"];
      return this.apiClient.callApi('/core/snapshots/{id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Retrieve a snapshot
     * Retrieve a snapshot.
     * @param {Number} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SnapshotRetrieve}
     */
  }, {
    key: "getSnapshot",
    value: function getSnapshot(id) {
      return this.getSnapshotWithHttpInfo(id).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Retrieve list of snapshots with pagination
     * Retrieves a list of snapshot, providing details such as snapshot name, timestamp, VM ID, and other relevant information.
     * @param {Object} opts Optional parameters
     * @param {String} [page] Page Number
     * @param {String} [pageSize] Data Per Page
     * @param {String} [search] Search By Snapshot ID or Name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Snapshots} and HTTP response
     */
  }, {
    key: "getSnapshotsWithHttpInfo",
    value: function getSnapshotsWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'search': opts['search']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _Snapshots["default"];
      return this.apiClient.callApi('/core/snapshots', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Retrieve list of snapshots with pagination
     * Retrieves a list of snapshot, providing details such as snapshot name, timestamp, VM ID, and other relevant information.
     * @param {Object} opts Optional parameters
     * @param {String} opts.page Page Number
     * @param {String} opts.pageSize Data Per Page
     * @param {String} opts.search Search By Snapshot ID or Name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Snapshots}
     */
  }, {
    key: "getSnapshots",
    value: function getSnapshots(opts) {
      return this.getSnapshotsWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Restore a snapshot
     * Restore a snapshot.
     * @param {Number} id 
     * @param {module:model/SnapshotRestoreRequest} payload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Instance} and HTTP response
     */
  }, {
    key: "postSnapshotRestoreWithHttpInfo",
    value: function postSnapshotRestoreWithHttpInfo(id, payload) {
      var postBody = payload;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postSnapshotRestore");
      }
      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postSnapshotRestore");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _Instance["default"];
      return this.apiClient.callApi('/core/snapshots/{id}/restore', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Restore a snapshot
     * Restore a snapshot.
     * @param {Number} id 
     * @param {module:model/SnapshotRestoreRequest} payload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Instance}
     */
  }, {
    key: "postSnapshotRestore",
    value: function postSnapshotRestore(id, payload) {
      return this.postSnapshotRestoreWithHttpInfo(id, payload).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
}();