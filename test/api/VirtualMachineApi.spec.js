/**
 * Infrahub-API
 * Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HyperstackApi);
  }
}(this, function(expect, HyperstackApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new HyperstackApi.VirtualMachineApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('VirtualMachineApi', function() {
    describe('deleteInstance', function() {
      it('should call deleteInstance successfully', function(done) {
        //uncomment below and update the code to test deleteInstance
        //instance.deleteInstance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteSecurityRule', function() {
      it('should call deleteSecurityRule successfully', function(done) {
        //uncomment below and update the code to test deleteSecurityRule
        //instance.deleteSecurityRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fetchVirtualMachineNameAvailability', function() {
      it('should call fetchVirtualMachineNameAvailability successfully', function(done) {
        //uncomment below and update the code to test fetchVirtualMachineNameAvailability
        //instance.fetchVirtualMachineNameAvailability(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getContractInstances', function() {
      it('should call getContractInstances successfully', function(done) {
        //uncomment below and update the code to test getContractInstances
        //instance.getContractInstances(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getInstance', function() {
      it('should call getInstance successfully', function(done) {
        //uncomment below and update the code to test getInstance
        //instance.getInstance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getInstance2', function() {
      it('should call getInstance2 successfully', function(done) {
        //uncomment below and update the code to test getInstance2
        //instance.getInstance2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getInstance3', function() {
      it('should call getInstance3 successfully', function(done) {
        //uncomment below and update the code to test getInstance3
        //instance.getInstance3(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getInstance4', function() {
      it('should call getInstance4 successfully', function(done) {
        //uncomment below and update the code to test getInstance4
        //instance.getInstance4(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getInstance5', function() {
      it('should call getInstance5 successfully', function(done) {
        //uncomment below and update the code to test getInstance5
        //instance.getInstance5(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getInstanceHibernate', function() {
      it('should call getInstanceHibernate successfully', function(done) {
        //uncomment below and update the code to test getInstanceHibernate
        //instance.getInstanceHibernate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getInstanceHibernateRestore', function() {
      it('should call getInstanceHibernateRestore successfully', function(done) {
        //uncomment below and update the code to test getInstanceHibernateRestore
        //instance.getInstanceHibernateRestore(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getInstanceLogs', function() {
      it('should call getInstanceLogs successfully', function(done) {
        //uncomment below and update the code to test getInstanceLogs
        //instance.getInstanceLogs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getInstanceMetrics', function() {
      it('should call getInstanceMetrics successfully', function(done) {
        //uncomment below and update the code to test getInstanceMetrics
        //instance.getInstanceMetrics(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postInstance', function() {
      it('should call postInstance successfully', function(done) {
        //uncomment below and update the code to test postInstance
        //instance.postInstance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postInstanceAttachFirewalls', function() {
      it('should call postInstanceAttachFirewalls successfully', function(done) {
        //uncomment below and update the code to test postInstanceAttachFirewalls
        //instance.postInstanceAttachFirewalls(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postInstanceLogs', function() {
      it('should call postInstanceLogs successfully', function(done) {
        //uncomment below and update the code to test postInstanceLogs
        //instance.postInstanceLogs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postInstanceResize', function() {
      it('should call postInstanceResize successfully', function(done) {
        //uncomment below and update the code to test postInstanceResize
        //instance.postInstanceResize(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postSecurityRule', function() {
      it('should call postSecurityRule successfully', function(done) {
        //uncomment below and update the code to test postSecurityRule
        //instance.postSecurityRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postSnapshots', function() {
      it('should call postSnapshots successfully', function(done) {
        //uncomment below and update the code to test postSnapshots
        //instance.postSnapshots(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putLabels', function() {
      it('should call putLabels successfully', function(done) {
        //uncomment below and update the code to test putLabels
        //instance.putLabels(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
