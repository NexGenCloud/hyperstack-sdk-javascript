/**
 * Infrahub-API
 * Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HyperstackApi);
  }
}(this, function(expect, HyperstackApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new HyperstackApi.VirtualMachineApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('VirtualMachineApi', function() {
    describe('addFirewallRuleToVirtualMachine', function() {
      it('should call addFirewallRuleToVirtualMachine successfully', function(done) {
        //uncomment below and update the code to test addFirewallRuleToVirtualMachine
        //instance.addFirewallRuleToVirtualMachine(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('attachFirewallsToAVirtualMachine', function() {
      it('should call attachFirewallsToAVirtualMachine successfully', function(done) {
        //uncomment below and update the code to test attachFirewallsToAVirtualMachine
        //instance.attachFirewallsToAVirtualMachine(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createSnapshotFromAVirtualMachine', function() {
      it('should call createSnapshotFromAVirtualMachine successfully', function(done) {
        //uncomment below and update the code to test createSnapshotFromAVirtualMachine
        //instance.createSnapshotFromAVirtualMachine(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createVirtualMachines', function() {
      it('should call createVirtualMachines successfully', function(done) {
        //uncomment below and update the code to test createVirtualMachines
        //instance.createVirtualMachines(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteFirewallRuleFromVirtualMachine', function() {
      it('should call deleteFirewallRuleFromVirtualMachine successfully', function(done) {
        //uncomment below and update the code to test deleteFirewallRuleFromVirtualMachine
        //instance.deleteFirewallRuleFromVirtualMachine(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteVirtualMachine', function() {
      it('should call deleteVirtualMachine successfully', function(done) {
        //uncomment below and update the code to test deleteVirtualMachine
        //instance.deleteVirtualMachine(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('editVirtualMachineLabels', function() {
      it('should call editVirtualMachineLabels successfully', function(done) {
        //uncomment below and update the code to test editVirtualMachineLabels
        //instance.editVirtualMachineLabels(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fetchVirtualMachineNameAvailability', function() {
      it('should call fetchVirtualMachineNameAvailability successfully', function(done) {
        //uncomment below and update the code to test fetchVirtualMachineNameAvailability
        //instance.fetchVirtualMachineNameAvailability(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('hardRebootVirtualMachine', function() {
      it('should call hardRebootVirtualMachine successfully', function(done) {
        //uncomment below and update the code to test hardRebootVirtualMachine
        //instance.hardRebootVirtualMachine(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('hibernateVirtualMachine', function() {
      it('should call hibernateVirtualMachine successfully', function(done) {
        //uncomment below and update the code to test hibernateVirtualMachine
        //instance.hibernateVirtualMachine(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listVirtualMachines', function() {
      it('should call listVirtualMachines successfully', function(done) {
        //uncomment below and update the code to test listVirtualMachines
        //instance.listVirtualMachines(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resizeVirtualMachine', function() {
      it('should call resizeVirtualMachine successfully', function(done) {
        //uncomment below and update the code to test resizeVirtualMachine
        //instance.resizeVirtualMachine(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restoreVirtualMachineFromHibernation', function() {
      it('should call restoreVirtualMachineFromHibernation successfully', function(done) {
        //uncomment below and update the code to test restoreVirtualMachineFromHibernation
        //instance.restoreVirtualMachineFromHibernation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('retrieveVirtualMachineDetails', function() {
      it('should call retrieveVirtualMachineDetails successfully', function(done) {
        //uncomment below and update the code to test retrieveVirtualMachineDetails
        //instance.retrieveVirtualMachineDetails(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('retrieveVirtualMachinePerformanceMetrics', function() {
      it('should call retrieveVirtualMachinePerformanceMetrics successfully', function(done) {
        //uncomment below and update the code to test retrieveVirtualMachinePerformanceMetrics
        //instance.retrieveVirtualMachinePerformanceMetrics(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('retrieveVirtualMachinesAssociatedWithAContract', function() {
      it('should call retrieveVirtualMachinesAssociatedWithAContract successfully', function(done) {
        //uncomment below and update the code to test retrieveVirtualMachinesAssociatedWithAContract
        //instance.retrieveVirtualMachinesAssociatedWithAContract(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startVirtualMachine', function() {
      it('should call startVirtualMachine successfully', function(done) {
        //uncomment below and update the code to test startVirtualMachine
        //instance.startVirtualMachine(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopVirtualMachine', function() {
      it('should call stopVirtualMachine successfully', function(done) {
        //uncomment below and update the code to test stopVirtualMachine
        //instance.stopVirtualMachine(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
