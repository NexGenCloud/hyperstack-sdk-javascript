/**
 * Infrahub-API
 * Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HyperstackApi);
  }
}(this, function(expect, HyperstackApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new HyperstackApi.FirewallsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('FirewallsApi', function() {
    describe('addFirewallRuleToFirewall', function() {
      it('should call addFirewallRuleToFirewall successfully', function(done) {
        //uncomment below and update the code to test addFirewallRuleToFirewall
        //instance.addFirewallRuleToFirewall(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createFirewall', function() {
      it('should call createFirewall successfully', function(done) {
        //uncomment below and update the code to test createFirewall
        //instance.createFirewall(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteFirewall', function() {
      it('should call deleteFirewall successfully', function(done) {
        //uncomment below and update the code to test deleteFirewall
        //instance.deleteFirewall(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteFirewallRulesFromFirewall', function() {
      it('should call deleteFirewallRulesFromFirewall successfully', function(done) {
        //uncomment below and update the code to test deleteFirewallRulesFromFirewall
        //instance.deleteFirewallRulesFromFirewall(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listFirewalls', function() {
      it('should call listFirewalls successfully', function(done) {
        //uncomment below and update the code to test listFirewalls
        //instance.listFirewalls(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('retrieveFirewallDetails', function() {
      it('should call retrieveFirewallDetails successfully', function(done) {
        //uncomment below and update the code to test retrieveFirewallDetails
        //instance.retrieveFirewallDetails(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
