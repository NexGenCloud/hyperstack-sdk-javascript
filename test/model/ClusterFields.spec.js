/**
 * Infrahub-API
 * Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HyperstackApi);
  }
}(this, function(expect, HyperstackApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new HyperstackApi.ClusterFields();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ClusterFields', function() {
    it('should create an instance of ClusterFields', function() {
      // uncomment below and update the code to test ClusterFields
      //var instance = new HyperstackApi.ClusterFields();
      //expect(instance).to.be.a(HyperstackApi.ClusterFields);
    });

    it('should have the property apiAddress (base name: "api_address")', function() {
      // uncomment below and update the code to test the property apiAddress
      //var instance = new HyperstackApi.ClusterFields();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new HyperstackApi.ClusterFields();
      //expect(instance).to.be();
    });

    it('should have the property environmentName (base name: "environment_name")', function() {
      // uncomment below and update the code to test the property environmentName
      //var instance = new HyperstackApi.ClusterFields();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new HyperstackApi.ClusterFields();
      //expect(instance).to.be();
    });

    it('should have the property keypairName (base name: "keypair_name")', function() {
      // uncomment below and update the code to test the property keypairName
      //var instance = new HyperstackApi.ClusterFields();
      //expect(instance).to.be();
    });

    it('should have the property kubeConfig (base name: "kube_config")', function() {
      // uncomment below and update the code to test the property kubeConfig
      //var instance = new HyperstackApi.ClusterFields();
      //expect(instance).to.be();
    });

    it('should have the property kubernetesVersion (base name: "kubernetes_version")', function() {
      // uncomment below and update the code to test the property kubernetesVersion
      //var instance = new HyperstackApi.ClusterFields();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new HyperstackApi.ClusterFields();
      //expect(instance).to.be();
    });

    it('should have the property nodeCount (base name: "node_count")', function() {
      // uncomment below and update the code to test the property nodeCount
      //var instance = new HyperstackApi.ClusterFields();
      //expect(instance).to.be();
    });

    it('should have the property nodeFlavor (base name: "node_flavor")', function() {
      // uncomment below and update the code to test the property nodeFlavor
      //var instance = new HyperstackApi.ClusterFields();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new HyperstackApi.ClusterFields();
      //expect(instance).to.be();
    });

    it('should have the property statusReason (base name: "status_reason")', function() {
      // uncomment below and update the code to test the property statusReason
      //var instance = new HyperstackApi.ClusterFields();
      //expect(instance).to.be();
    });

  });

}));
