/**
 * Infrahub-API
 * Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HyperstackApi);
  }
}(this, function(expect, HyperstackApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new HyperstackApi.CreateInstancesPayload();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CreateInstancesPayload', function() {
    it('should create an instance of CreateInstancesPayload', function() {
      // uncomment below and update the code to test CreateInstancesPayload
      //var instance = new HyperstackApi.CreateInstancesPayload();
      //expect(instance).to.be.a(HyperstackApi.CreateInstancesPayload);
    });

    it('should have the property assignFloatingIp (base name: "assign_floating_ip")', function() {
      // uncomment below and update the code to test the property assignFloatingIp
      //var instance = new HyperstackApi.CreateInstancesPayload();
      //expect(instance).to.be();
    });

    it('should have the property callbackUrl (base name: "callback_url")', function() {
      // uncomment below and update the code to test the property callbackUrl
      //var instance = new HyperstackApi.CreateInstancesPayload();
      //expect(instance).to.be();
    });

    it('should have the property count (base name: "count")', function() {
      // uncomment below and update the code to test the property count
      //var instance = new HyperstackApi.CreateInstancesPayload();
      //expect(instance).to.be();
    });

    it('should have the property createBootableVolume (base name: "create_bootable_volume")', function() {
      // uncomment below and update the code to test the property createBootableVolume
      //var instance = new HyperstackApi.CreateInstancesPayload();
      //expect(instance).to.be();
    });

    it('should have the property enablePortRandomization (base name: "enable_port_randomization")', function() {
      // uncomment below and update the code to test the property enablePortRandomization
      //var instance = new HyperstackApi.CreateInstancesPayload();
      //expect(instance).to.be();
    });

    it('should have the property environmentName (base name: "environment_name")', function() {
      // uncomment below and update the code to test the property environmentName
      //var instance = new HyperstackApi.CreateInstancesPayload();
      //expect(instance).to.be();
    });

    it('should have the property flavor (base name: "flavor")', function() {
      // uncomment below and update the code to test the property flavor
      //var instance = new HyperstackApi.CreateInstancesPayload();
      //expect(instance).to.be();
    });

    it('should have the property flavorName (base name: "flavor_name")', function() {
      // uncomment below and update the code to test the property flavorName
      //var instance = new HyperstackApi.CreateInstancesPayload();
      //expect(instance).to.be();
    });

    it('should have the property imageName (base name: "image_name")', function() {
      // uncomment below and update the code to test the property imageName
      //var instance = new HyperstackApi.CreateInstancesPayload();
      //expect(instance).to.be();
    });

    it('should have the property keyName (base name: "key_name")', function() {
      // uncomment below and update the code to test the property keyName
      //var instance = new HyperstackApi.CreateInstancesPayload();
      //expect(instance).to.be();
    });

    it('should have the property labels (base name: "labels")', function() {
      // uncomment below and update the code to test the property labels
      //var instance = new HyperstackApi.CreateInstancesPayload();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new HyperstackApi.CreateInstancesPayload();
      //expect(instance).to.be();
    });

    it('should have the property profile (base name: "profile")', function() {
      // uncomment below and update the code to test the property profile
      //var instance = new HyperstackApi.CreateInstancesPayload();
      //expect(instance).to.be();
    });

    it('should have the property securityRules (base name: "security_rules")', function() {
      // uncomment below and update the code to test the property securityRules
      //var instance = new HyperstackApi.CreateInstancesPayload();
      //expect(instance).to.be();
    });

    it('should have the property userData (base name: "user_data")', function() {
      // uncomment below and update the code to test the property userData
      //var instance = new HyperstackApi.CreateInstancesPayload();
      //expect(instance).to.be();
    });

    it('should have the property volumeName (base name: "volume_name")', function() {
      // uncomment below and update the code to test the property volumeName
      //var instance = new HyperstackApi.CreateInstancesPayload();
      //expect(instance).to.be();
    });

  });

}));
