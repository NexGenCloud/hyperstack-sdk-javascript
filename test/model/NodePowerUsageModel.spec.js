/**
 * Infrahub-API
 * Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HyperstackApi);
  }
}(this, function(expect, HyperstackApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new HyperstackApi.NodePowerUsageModel();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('NodePowerUsageModel', function() {
    it('should create an instance of NodePowerUsageModel', function() {
      // uncomment below and update the code to test NodePowerUsageModel
      //var instance = new HyperstackApi.NodePowerUsageModel();
      //expect(instance).to.be.a(HyperstackApi.NodePowerUsageModel);
    });

    it('should have the property flavors (base name: "flavors")', function() {
      // uncomment below and update the code to test the property flavors
      //var instance = new HyperstackApi.NodePowerUsageModel();
      //expect(instance).to.be();
    });

    it('should have the property nexgenName (base name: "nexgen_name")', function() {
      // uncomment below and update the code to test the property nexgenName
      //var instance = new HyperstackApi.NodePowerUsageModel();
      //expect(instance).to.be();
    });

    it('should have the property openstackId (base name: "openstack_id")', function() {
      // uncomment below and update the code to test the property openstackId
      //var instance = new HyperstackApi.NodePowerUsageModel();
      //expect(instance).to.be();
    });

    it('should have the property openstackName (base name: "openstack_name")', function() {
      // uncomment below and update the code to test the property openstackName
      //var instance = new HyperstackApi.NodePowerUsageModel();
      //expect(instance).to.be();
    });

    it('should have the property organizations (base name: "organizations")', function() {
      // uncomment below and update the code to test the property organizations
      //var instance = new HyperstackApi.NodePowerUsageModel();
      //expect(instance).to.be();
    });

    it('should have the property powerUsages (base name: "power_usages")', function() {
      // uncomment below and update the code to test the property powerUsages
      //var instance = new HyperstackApi.NodePowerUsageModel();
      //expect(instance).to.be();
    });

    it('should have the property projects (base name: "projects")', function() {
      // uncomment below and update the code to test the property projects
      //var instance = new HyperstackApi.NodePowerUsageModel();
      //expect(instance).to.be();
    });

    it('should have the property provisionDate (base name: "provision_date")', function() {
      // uncomment below and update the code to test the property provisionDate
      //var instance = new HyperstackApi.NodePowerUsageModel();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new HyperstackApi.NodePowerUsageModel();
      //expect(instance).to.be();
    });

    it('should have the property stocks (base name: "stocks")', function() {
      // uncomment below and update the code to test the property stocks
      //var instance = new HyperstackApi.NodePowerUsageModel();
      //expect(instance).to.be();
    });

    it('should have the property sunsetDate (base name: "sunset_date")', function() {
      // uncomment below and update the code to test the property sunsetDate
      //var instance = new HyperstackApi.NodePowerUsageModel();
      //expect(instance).to.be();
    });

  });

}));
