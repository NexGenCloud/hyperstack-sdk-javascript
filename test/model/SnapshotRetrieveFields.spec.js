/**
 * Infrahub-API
 * Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HyperstackApi);
  }
}(this, function(expect, HyperstackApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new HyperstackApi.SnapshotRetrieveFields();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SnapshotRetrieveFields', function() {
    it('should create an instance of SnapshotRetrieveFields', function() {
      // uncomment below and update the code to test SnapshotRetrieveFields
      //var instance = new HyperstackApi.SnapshotRetrieveFields();
      //expect(instance).to.be.a(HyperstackApi.SnapshotRetrieveFields);
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new HyperstackApi.SnapshotRetrieveFields();
      //expect(instance).to.be();
    });

    it('should have the property customImage (base name: "custom_image")', function() {
      // uncomment below and update the code to test the property customImage
      //var instance = new HyperstackApi.SnapshotRetrieveFields();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new HyperstackApi.SnapshotRetrieveFields();
      //expect(instance).to.be();
    });

    it('should have the property hasFloatingIp (base name: "has_floating_ip")', function() {
      // uncomment below and update the code to test the property hasFloatingIp
      //var instance = new HyperstackApi.SnapshotRetrieveFields();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new HyperstackApi.SnapshotRetrieveFields();
      //expect(instance).to.be();
    });

    it('should have the property isImage (base name: "is_image")', function() {
      // uncomment below and update the code to test the property isImage
      //var instance = new HyperstackApi.SnapshotRetrieveFields();
      //expect(instance).to.be();
    });

    it('should have the property labels (base name: "labels")', function() {
      // uncomment below and update the code to test the property labels
      //var instance = new HyperstackApi.SnapshotRetrieveFields();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new HyperstackApi.SnapshotRetrieveFields();
      //expect(instance).to.be();
    });

    it('should have the property region (base name: "region")', function() {
      // uncomment below and update the code to test the property region
      //var instance = new HyperstackApi.SnapshotRetrieveFields();
      //expect(instance).to.be();
    });

    it('should have the property regionId (base name: "region_id")', function() {
      // uncomment below and update the code to test the property regionId
      //var instance = new HyperstackApi.SnapshotRetrieveFields();
      //expect(instance).to.be();
    });

    it('should have the property size (base name: "size")', function() {
      // uncomment below and update the code to test the property size
      //var instance = new HyperstackApi.SnapshotRetrieveFields();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new HyperstackApi.SnapshotRetrieveFields();
      //expect(instance).to.be();
    });

    it('should have the property updatedAt (base name: "updated_at")', function() {
      // uncomment below and update the code to test the property updatedAt
      //var instance = new HyperstackApi.SnapshotRetrieveFields();
      //expect(instance).to.be();
    });

    it('should have the property vmEnvironment (base name: "vm_environment")', function() {
      // uncomment below and update the code to test the property vmEnvironment
      //var instance = new HyperstackApi.SnapshotRetrieveFields();
      //expect(instance).to.be();
    });

    it('should have the property vmFlavor (base name: "vm_flavor")', function() {
      // uncomment below and update the code to test the property vmFlavor
      //var instance = new HyperstackApi.SnapshotRetrieveFields();
      //expect(instance).to.be();
    });

    it('should have the property vmId (base name: "vm_id")', function() {
      // uncomment below and update the code to test the property vmId
      //var instance = new HyperstackApi.SnapshotRetrieveFields();
      //expect(instance).to.be();
    });

    it('should have the property vmImage (base name: "vm_image")', function() {
      // uncomment below and update the code to test the property vmImage
      //var instance = new HyperstackApi.SnapshotRetrieveFields();
      //expect(instance).to.be();
    });

    it('should have the property vmKeypair (base name: "vm_keypair")', function() {
      // uncomment below and update the code to test the property vmKeypair
      //var instance = new HyperstackApi.SnapshotRetrieveFields();
      //expect(instance).to.be();
    });

    it('should have the property vmName (base name: "vm_name")', function() {
      // uncomment below and update the code to test the property vmName
      //var instance = new HyperstackApi.SnapshotRetrieveFields();
      //expect(instance).to.be();
    });

    it('should have the property vmStatus (base name: "vm_status")', function() {
      // uncomment below and update the code to test the property vmStatus
      //var instance = new HyperstackApi.SnapshotRetrieveFields();
      //expect(instance).to.be();
    });

    it('should have the property volumeId (base name: "volume_id")', function() {
      // uncomment below and update the code to test the property volumeId
      //var instance = new HyperstackApi.SnapshotRetrieveFields();
      //expect(instance).to.be();
    });

    it('should have the property volumeName (base name: "volume_name")', function() {
      // uncomment below and update the code to test the property volumeName
      //var instance = new HyperstackApi.SnapshotRetrieveFields();
      //expect(instance).to.be();
    });

  });

}));
